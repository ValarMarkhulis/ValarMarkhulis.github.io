
osc_projekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00000e18  00000eac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000010ef  00800206  00800206  00000eb2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000eb2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ee4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d12  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011d0  00000000  00000000  00002d96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f15  00000000  00000000  00003f66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000424  00000000  00000000  00004e7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000837  00000000  00000000  000052a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ef1  00000000  00000000  00005ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000069c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	81 c0       	rjmp	.+258    	; 0x104 <__ctors_end>
   2:	00 00       	nop
   4:	9e c0       	rjmp	.+316    	; 0x142 <__bad_interrupt>
   6:	00 00       	nop
   8:	9c c0       	rjmp	.+312    	; 0x142 <__bad_interrupt>
   a:	00 00       	nop
   c:	9a c0       	rjmp	.+308    	; 0x142 <__bad_interrupt>
   e:	00 00       	nop
  10:	98 c0       	rjmp	.+304    	; 0x142 <__bad_interrupt>
  12:	00 00       	nop
  14:	96 c0       	rjmp	.+300    	; 0x142 <__bad_interrupt>
  16:	00 00       	nop
  18:	94 c0       	rjmp	.+296    	; 0x142 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	92 c0       	rjmp	.+292    	; 0x142 <__bad_interrupt>
  1e:	00 00       	nop
  20:	90 c0       	rjmp	.+288    	; 0x142 <__bad_interrupt>
  22:	00 00       	nop
  24:	8e c0       	rjmp	.+284    	; 0x142 <__bad_interrupt>
  26:	00 00       	nop
  28:	8c c0       	rjmp	.+280    	; 0x142 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	8a c0       	rjmp	.+276    	; 0x142 <__bad_interrupt>
  2e:	00 00       	nop
  30:	88 c0       	rjmp	.+272    	; 0x142 <__bad_interrupt>
  32:	00 00       	nop
  34:	86 c0       	rjmp	.+268    	; 0x142 <__bad_interrupt>
  36:	00 00       	nop
  38:	84 c0       	rjmp	.+264    	; 0x142 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	82 c0       	rjmp	.+260    	; 0x142 <__bad_interrupt>
  3e:	00 00       	nop
  40:	80 c0       	rjmp	.+256    	; 0x142 <__bad_interrupt>
  42:	00 00       	nop
  44:	7e c0       	rjmp	.+252    	; 0x142 <__bad_interrupt>
  46:	00 00       	nop
  48:	f3 c0       	rjmp	.+486    	; 0x230 <__vector_18>
  4a:	00 00       	nop
  4c:	7a c0       	rjmp	.+244    	; 0x142 <__bad_interrupt>
  4e:	00 00       	nop
  50:	78 c0       	rjmp	.+240    	; 0x142 <__bad_interrupt>
  52:	00 00       	nop
  54:	76 c0       	rjmp	.+236    	; 0x142 <__bad_interrupt>
  56:	00 00       	nop
  58:	74 c0       	rjmp	.+232    	; 0x142 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	72 c0       	rjmp	.+228    	; 0x142 <__bad_interrupt>
  5e:	00 00       	nop
  60:	70 c0       	rjmp	.+224    	; 0x142 <__bad_interrupt>
  62:	00 00       	nop
  64:	6e c0       	rjmp	.+220    	; 0x142 <__bad_interrupt>
  66:	00 00       	nop
  68:	6c c0       	rjmp	.+216    	; 0x142 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c1       	rjmp	.+666    	; 0x308 <__vector_27>
  6e:	00 00       	nop
  70:	68 c0       	rjmp	.+208    	; 0x142 <__bad_interrupt>
  72:	00 00       	nop
  74:	b4 c0       	rjmp	.+360    	; 0x1de <__vector_29>
  76:	00 00       	nop
  78:	64 c0       	rjmp	.+200    	; 0x142 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	62 c0       	rjmp	.+196    	; 0x142 <__bad_interrupt>
  7e:	00 00       	nop
  80:	60 c0       	rjmp	.+192    	; 0x142 <__bad_interrupt>
  82:	00 00       	nop
  84:	5e c0       	rjmp	.+188    	; 0x142 <__bad_interrupt>
  86:	00 00       	nop
  88:	5c c0       	rjmp	.+184    	; 0x142 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	5a c0       	rjmp	.+180    	; 0x142 <__bad_interrupt>
  8e:	00 00       	nop
  90:	7c c2       	rjmp	.+1272   	; 0x58a <__vector_36>
  92:	00 00       	nop
  94:	56 c0       	rjmp	.+172    	; 0x142 <__bad_interrupt>
  96:	00 00       	nop
  98:	8a c3       	rjmp	.+1812   	; 0x7ae <__vector_38>
  9a:	00 00       	nop
  9c:	52 c0       	rjmp	.+164    	; 0x142 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	50 c0       	rjmp	.+160    	; 0x142 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	4e c0       	rjmp	.+156    	; 0x142 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	4c c0       	rjmp	.+152    	; 0x142 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	4a c0       	rjmp	.+148    	; 0x142 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	48 c0       	rjmp	.+144    	; 0x142 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	46 c0       	rjmp	.+140    	; 0x142 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	44 c0       	rjmp	.+136    	; 0x142 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	42 c0       	rjmp	.+132    	; 0x142 <__bad_interrupt>
  be:	00 00       	nop
  c0:	40 c0       	rjmp	.+128    	; 0x142 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	3e c0       	rjmp	.+124    	; 0x142 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	3c c0       	rjmp	.+120    	; 0x142 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	3a c0       	rjmp	.+116    	; 0x142 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	38 c0       	rjmp	.+112    	; 0x142 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	36 c0       	rjmp	.+108    	; 0x142 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	34 c0       	rjmp	.+104    	; 0x142 <__bad_interrupt>
  da:	00 00       	nop
  dc:	32 c0       	rjmp	.+100    	; 0x142 <__bad_interrupt>
  de:	00 00       	nop
  e0:	30 c0       	rjmp	.+96     	; 0x142 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	a5 01       	movw	r20, r10
  e6:	bf 01       	movw	r22, r30
  e8:	c9 01       	movw	r24, r18
  ea:	d7 01       	movw	r26, r14
  ec:	e3 01       	movw	r28, r6
  ee:	ed 01       	movw	r28, r26
  f0:	14 02       	muls	r17, r20
  f2:	1d 02       	muls	r17, r29
  f4:	18 04       	cpc	r1, r8
  f6:	22 04       	cpc	r2, r2
  f8:	2c 04       	cpc	r2, r12
  fa:	3a 04       	cpc	r3, r10
  fc:	46 04       	cpc	r4, r6
  fe:	4f 04       	cpc	r4, r15
 100:	9e 04       	cpc	r9, r14
 102:	ae 04       	cpc	r10, r14

00000104 <__ctors_end>:
 104:	11 24       	eor	r1, r1
 106:	1f be       	out	0x3f, r1	; 63
 108:	cf ef       	ldi	r28, 0xFF	; 255
 10a:	d1 e2       	ldi	r29, 0x21	; 33
 10c:	de bf       	out	0x3e, r29	; 62
 10e:	cd bf       	out	0x3d, r28	; 61
 110:	00 e0       	ldi	r16, 0x00	; 0
 112:	0c bf       	out	0x3c, r16	; 60

00000114 <__do_copy_data>:
 114:	12 e0       	ldi	r17, 0x02	; 2
 116:	a0 e0       	ldi	r26, 0x00	; 0
 118:	b2 e0       	ldi	r27, 0x02	; 2
 11a:	e8 e1       	ldi	r30, 0x18	; 24
 11c:	fe e0       	ldi	r31, 0x0E	; 14
 11e:	00 e0       	ldi	r16, 0x00	; 0
 120:	0b bf       	out	0x3b, r16	; 59
 122:	02 c0       	rjmp	.+4      	; 0x128 <__do_copy_data+0x14>
 124:	07 90       	elpm	r0, Z+
 126:	0d 92       	st	X+, r0
 128:	a6 30       	cpi	r26, 0x06	; 6
 12a:	b1 07       	cpc	r27, r17
 12c:	d9 f7       	brne	.-10     	; 0x124 <__do_copy_data+0x10>

0000012e <__do_clear_bss>:
 12e:	22 e1       	ldi	r18, 0x12	; 18
 130:	a6 e0       	ldi	r26, 0x06	; 6
 132:	b2 e0       	ldi	r27, 0x02	; 2
 134:	01 c0       	rjmp	.+2      	; 0x138 <.do_clear_bss_start>

00000136 <.do_clear_bss_loop>:
 136:	1d 92       	st	X+, r1

00000138 <.do_clear_bss_start>:
 138:	a5 3f       	cpi	r26, 0xF5	; 245
 13a:	b2 07       	cpc	r27, r18
 13c:	e1 f7       	brne	.-8      	; 0x136 <.do_clear_bss_loop>
 13e:	81 d4       	rcall	.+2306   	; 0xa42 <main>
 140:	69 c6       	rjmp	.+3282   	; 0xe14 <_exit>

00000142 <__bad_interrupt>:
 142:	5e cf       	rjmp	.-324    	; 0x0 <__vectors>

00000144 <init_timer1>:
///////////////////////
// TIMER 1 FUNCTIONS //
///////////////////////

void init_timer1(unsigned int sample_rate){
	OCR1A = 250000/sample_rate; // udregner compareværdi
 144:	9c 01       	movw	r18, r24
 146:	40 e0       	ldi	r20, 0x00	; 0
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	60 e9       	ldi	r22, 0x90	; 144
 14c:	70 ed       	ldi	r23, 0xD0	; 208
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	1a d6       	rcall	.+3124   	; 0xd88 <__divmodsi4>
 154:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 158:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	OCR1B = 1;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
 164:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
	TCCR1B |= (1<<WGM12); // CTC mode
 168:	e1 e8       	ldi	r30, 0x81	; 129
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	88 60       	ori	r24, 0x08	; 8
 170:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS11)|(1<<CS10); //CLK/64
 172:	80 81       	ld	r24, Z
 174:	83 60       	ori	r24, 0x03	; 3
 176:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1B); // comparematch interrupt enable
 178:	ef e6       	ldi	r30, 0x6F	; 111
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	84 60       	ori	r24, 0x04	; 4
 180:	80 83       	st	Z, r24
 182:	08 95       	ret

00000184 <init_ADC_interrupt_AREF>:
///////////////////
// ADC FUNCTIONS //
///////////////////

void init_ADC_interrupt_AREF(unsigned char channel){
	ADMUX  |=(channel&0x07);
 184:	ac e7       	ldi	r26, 0x7C	; 124
 186:	b0 e0       	ldi	r27, 0x00	; 0
 188:	9c 91       	ld	r25, X
 18a:	87 70       	andi	r24, 0x07	; 7
 18c:	98 2b       	or	r25, r24
 18e:	9c 93       	st	X, r25
	ADCSRA |= (1<<ADEN); // ADC Enable side 292
 190:	ea e7       	ldi	r30, 0x7A	; 122
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	80 68       	ori	r24, 0x80	; 128
 198:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2); //skaller med faktor 16, side 293.
 19a:	80 81       	ld	r24, Z
 19c:	84 60       	ori	r24, 0x04	; 4
 19e:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADIE); // ADC Interrupt Enable
 1a0:	80 81       	ld	r24, Z
 1a2:	88 60       	ori	r24, 0x08	; 8
 1a4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); // start conversion
 1a6:	80 81       	ld	r24, Z
 1a8:	80 64       	ori	r24, 0x40	; 64
 1aa:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADATE); // auto trigger mode
 1ac:	80 81       	ld	r24, Z
 1ae:	80 62       	ori	r24, 0x20	; 32
 1b0:	80 83       	st	Z, r24
	ADCSRB |= (1<<ADTS2)|(1<<ADTS0); // timer 1 compare match b trigger
 1b2:	eb e7       	ldi	r30, 0x7B	; 123
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	85 60       	ori	r24, 0x05	; 5
 1ba:	80 83       	st	Z, r24
	ADMUX  |= (1<<ADLAR); // "ADC Left Adjust Result" sat højt side 290.
 1bc:	8c 91       	ld	r24, X
 1be:	80 62       	ori	r24, 0x20	; 32
 1c0:	8c 93       	st	X, r24
 1c2:	08 95       	ret

000001c4 <set_samplerate>:
}

void set_samplerate(unsigned int sample_rate){
	OCR1A = 250000/sample_rate;
 1c4:	9c 01       	movw	r18, r24
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	60 e9       	ldi	r22, 0x90	; 144
 1cc:	70 ed       	ldi	r23, 0xD0	; 208
 1ce:	83 e0       	ldi	r24, 0x03	; 3
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	da d5       	rcall	.+2996   	; 0xd88 <__divmodsi4>
 1d4:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 1d8:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 1dc:	08 95       	ret

000001de <__vector_29>:

////////////////////////
//  SERVICE ROUTINES  //
////////////////////////

ISR(ADC_vect){
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	0b b6       	in	r0, 0x3b	; 59
 1ea:	0f 92       	push	r0
 1ec:	2f 93       	push	r18
 1ee:	3f 93       	push	r19
 1f0:	4f 93       	push	r20
 1f2:	5f 93       	push	r21
 1f4:	6f 93       	push	r22
 1f6:	7f 93       	push	r23
 1f8:	8f 93       	push	r24
 1fa:	9f 93       	push	r25
 1fc:	af 93       	push	r26
 1fe:	bf 93       	push	r27
 200:	ef 93       	push	r30
 202:	ff 93       	push	r31
	insert(ADCH);//Indsætter en ADC måling i FIFO bufferen
 204:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 208:	1d d0       	rcall	.+58     	; 0x244 <insert>
}
 20a:	ff 91       	pop	r31
 20c:	ef 91       	pop	r30
 20e:	bf 91       	pop	r27
 210:	af 91       	pop	r26
 212:	9f 91       	pop	r25
 214:	8f 91       	pop	r24
 216:	7f 91       	pop	r23
 218:	6f 91       	pop	r22
 21a:	5f 91       	pop	r21
 21c:	4f 91       	pop	r20
 21e:	3f 91       	pop	r19
 220:	2f 91       	pop	r18
 222:	0f 90       	pop	r0
 224:	0b be       	out	0x3b, r0	; 59
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

00000230 <__vector_18>:

ISR (TIMER1_COMPB_vect){	
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	0f 92       	push	r0
 238:	11 24       	eor	r1, r1
 23a:	0f 90       	pop	r0
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <insert>:
volatile int rear = -1;
volatile unsigned int itemCount = 0;

void insert(char data){

	if(itemCount != MAX) {
 244:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <itemCount>
 248:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <itemCount+0x1>
 24c:	20 3d       	cpi	r18, 0xD0	; 208
 24e:	37 40       	sbci	r19, 0x07	; 7
 250:	21 f1       	breq	.+72     	; 0x29a <insert+0x56>
		
		if(rear == MAX-1) {
 252:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 256:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 25a:	2f 3c       	cpi	r18, 0xCF	; 207
 25c:	37 40       	sbci	r19, 0x07	; 7
 25e:	31 f4       	brne	.+12     	; 0x26c <insert+0x28>
			rear = -1;
 260:	2f ef       	ldi	r18, 0xFF	; 255
 262:	3f ef       	ldi	r19, 0xFF	; 255
 264:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__data_start+0x1>
 268:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__data_start>
		}
		FIFO[++rear] = data;
 26c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 270:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 274:	2f 5f       	subi	r18, 0xFF	; 255
 276:	3f 4f       	sbci	r19, 0xFF	; 255
 278:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__data_start+0x1>
 27c:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__data_start>
 280:	f9 01       	movw	r30, r18
 282:	e4 51       	subi	r30, 0x14	; 20
 284:	f6 4f       	sbci	r31, 0xF6	; 246
 286:	80 83       	st	Z, r24
		itemCount++;
 288:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <itemCount>
 28c:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <itemCount+0x1>
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <itemCount+0x1>
 296:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <itemCount>
 29a:	08 95       	ret

0000029c <removeData>:
	}
}
char removeData(){
	char data = FIFO[front++];
 29c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 2a0:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__data_end+0x1>
 2a4:	9c 01       	movw	r18, r24
 2a6:	2f 5f       	subi	r18, 0xFF	; 255
 2a8:	3f 4f       	sbci	r19, 0xFF	; 255
 2aa:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <__data_end+0x1>
 2ae:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <__data_end>
 2b2:	fc 01       	movw	r30, r24
 2b4:	e4 51       	subi	r30, 0x14	; 20
 2b6:	f6 4f       	sbci	r31, 0xF6	; 246
 2b8:	80 81       	ld	r24, Z
	
	if(front == MAX){
 2ba:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 2be:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 2c2:	20 3d       	cpi	r18, 0xD0	; 208
 2c4:	37 40       	sbci	r19, 0x07	; 7
 2c6:	21 f4       	brne	.+8      	; 0x2d0 <removeData+0x34>
		front = 0;
 2c8:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <__data_end+0x1>
 2cc:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <__data_end>
	}
	itemCount--;
 2d0:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <itemCount>
 2d4:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <itemCount+0x1>
 2d8:	21 50       	subi	r18, 0x01	; 1
 2da:	31 09       	sbc	r19, r1
 2dc:	30 93 09 02 	sts	0x0209, r19	; 0x800209 <itemCount+0x1>
 2e0:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <itemCount>
	return data;
 2e4:	08 95       	ret

000002e6 <setup>:
char amplitude();
void bodeplot();


void setup (){
	sei();
 2e6:	78 94       	sei
	init_ADC_interrupt_AREF(0);
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	4c df       	rcall	.-360    	; 0x184 <init_ADC_interrupt_AREF>
	init_timer1(1000);
 2ec:	88 ee       	ldi	r24, 0xE8	; 232
 2ee:	93 e0       	ldi	r25, 0x03	; 3
 2f0:	29 df       	rcall	.-430    	; 0x144 <init_timer1>
	init_uart0(16); //baud rate 115.2K | Når værdien er 16(giver ca 2% fejl)
 2f2:	80 e1       	ldi	r24, 0x10	; 16
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	ff d4       	rcall	.+2558   	; 0xcf6 <init_uart0>
	init_uart1(16);
 2f8:	80 e1       	ldi	r24, 0x10	; 16
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	13 d5       	rcall	.+2598   	; 0xd24 <init_uart1>
	SPI_MasterInit();
 2fe:	d1 d4       	rcall	.+2466   	; 0xca2 <SPI_MasterInit>
	DIS_intr_TX();//Disable TXInt
 300:	2f d5       	rcall	.+2654   	; 0xd60 <DIS_intr_TX>
	UDR1 = 0;//Sender til uart for at enable interrupt
 302:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 306:	08 95       	ret

00000308 <__vector_27>:
	}
}


//TEST UART0
ISR(USART0_TX_vect){
 308:	1f 92       	push	r1
 30a:	0f 92       	push	r0
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	0f 92       	push	r0
 310:	11 24       	eor	r1, r1
 312:	0b b6       	in	r0, 0x3b	; 59
 314:	0f 92       	push	r0
 316:	2f 93       	push	r18
 318:	3f 93       	push	r19
 31a:	4f 93       	push	r20
 31c:	5f 93       	push	r21
 31e:	6f 93       	push	r22
 320:	7f 93       	push	r23
 322:	8f 93       	push	r24
 324:	9f 93       	push	r25
 326:	af 93       	push	r26
 328:	bf 93       	push	r27
 32a:	ef 93       	push	r30
 32c:	ff 93       	push	r31
	sei();
 32e:	78 94       	sei
	static int i=0, turn=0;
	static unsigned char checksum=0, data_out;
	
	switch(turn){
 330:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <turn.1897>
 334:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <turn.1897+0x1>
 338:	e8 30       	cpi	r30, 0x08	; 8
 33a:	f1 05       	cpc	r31, r1
 33c:	08 f0       	brcs	.+2      	; 0x340 <__vector_27+0x38>
 33e:	88 c0       	rjmp	.+272    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 340:	88 27       	eor	r24, r24
 342:	ee 58       	subi	r30, 0x8E	; 142
 344:	ff 4f       	sbci	r31, 0xFF	; 255
 346:	8f 4f       	sbci	r24, 0xFF	; 255
 348:	3b c5       	rjmp	.+2678   	; 0xdc0 <__tablejump2__>
		case 0 :
			turn=1;
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <turn.1897+0x1>
 352:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <turn.1897>
			checksum ^= 0x55^0xAA^(((record_len+7)&0xFF00)>>8)^((record_len+7)&0x00FF)^0x02;
 356:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <record_len>
 35a:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <record_len+0x1>
 35e:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <checksum.1898>
 362:	8d ef       	ldi	r24, 0xFD	; 253
 364:	89 27       	eor	r24, r25
 366:	97 e0       	ldi	r25, 0x07	; 7
 368:	92 0f       	add	r25, r18
 36a:	89 27       	eor	r24, r25
 36c:	29 5f       	subi	r18, 0xF9	; 249
 36e:	3f 4f       	sbci	r19, 0xFF	; 255
 370:	83 27       	eor	r24, r19
 372:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <checksum.1898>
			UDR0 = 0x55;
 376:	85 e5       	ldi	r24, 0x55	; 85
 378:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		break;
 37c:	69 c0       	rjmp	.+210    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		case 1 :
			turn=2;
 37e:	82 e0       	ldi	r24, 0x02	; 2
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <turn.1897+0x1>
 386:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <turn.1897>
			UDR0 = 0xAA;
 38a:	8a ea       	ldi	r24, 0xAA	; 170
 38c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
			break;
 390:	5f c0       	rjmp	.+190    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		case 2 :
			turn=3;
 392:	83 e0       	ldi	r24, 0x03	; 3
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <turn.1897+0x1>
 39a:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <turn.1897>
			UDR0 = ((record_len+7)&0xFF00)>>8;
 39e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <record_len>
 3a2:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <record_len+0x1>
 3a6:	07 96       	adiw	r24, 0x07	; 7
 3a8:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
			break;
 3ac:	51 c0       	rjmp	.+162    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		case 3 :
			turn=4;
 3ae:	84 e0       	ldi	r24, 0x04	; 4
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <turn.1897+0x1>
 3b6:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <turn.1897>
			UDR0 = (record_len+7)&0x00FF;
 3ba:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <record_len>
 3be:	89 5f       	subi	r24, 0xF9	; 249
 3c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
			break;
 3c4:	45 c0       	rjmp	.+138    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		case 4 :
			turn=5;
 3c6:	85 e0       	ldi	r24, 0x05	; 5
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <turn.1897+0x1>
 3ce:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <turn.1897>
			UDR0 = 0x02;
 3d2:	82 e0       	ldi	r24, 0x02	; 2
 3d4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
			break;
 3d8:	3b c0       	rjmp	.+118    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		case 5 :
			data_out = removeData();
 3da:	60 df       	rcall	.-320    	; 0x29c <removeData>
 3dc:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <data_out.1899>
			checksum ^= data_out;
 3e0:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <checksum.1898>
 3e4:	98 27       	eor	r25, r24
 3e6:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <checksum.1898>
			UDR0 = data_out;
 3ea:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
			i++;
 3ee:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <i.1896>
 3f2:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <i.1896+0x1>
 3f6:	01 96       	adiw	r24, 0x01	; 1
 3f8:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <i.1896+0x1>
 3fc:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <i.1896>
			if(i==record_len-1){
 400:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <record_len>
 404:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <record_len+0x1>
 408:	21 50       	subi	r18, 0x01	; 1
 40a:	31 09       	sbc	r19, r1
 40c:	82 17       	cp	r24, r18
 40e:	93 07       	cpc	r25, r19
 410:	f9 f4       	brne	.+62     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
				turn = 6;
 412:	86 e0       	ldi	r24, 0x06	; 6
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <turn.1897+0x1>
 41a:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <turn.1897>
				i=0;
 41e:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <i.1896+0x1>
 422:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <i.1896>
 426:	14 c0       	rjmp	.+40     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
			}
		break;
			case 6 :
			turn=7;
 428:	87 e0       	ldi	r24, 0x07	; 7
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <turn.1897+0x1>
 430:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <turn.1897>
			UDR0 = 0x00;
 434:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
			break;
 438:	0b c0       	rjmp	.+22     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		case 7 :
			turn=0;
 43a:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <turn.1897+0x1>
 43e:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <turn.1897>
			UDR0 = checksum;
 442:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <checksum.1898>
 446:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
			DIS_intr_TX();
 44a:	8a d4       	rcall	.+2324   	; 0xd60 <DIS_intr_TX>
			checksum=0;
 44c:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <checksum.1898>
			break;
	}
}
 450:	ff 91       	pop	r31
 452:	ef 91       	pop	r30
 454:	bf 91       	pop	r27
 456:	af 91       	pop	r26
 458:	9f 91       	pop	r25
 45a:	8f 91       	pop	r24
 45c:	7f 91       	pop	r23
 45e:	6f 91       	pop	r22
 460:	5f 91       	pop	r21
 462:	4f 91       	pop	r20
 464:	3f 91       	pop	r19
 466:	2f 91       	pop	r18
 468:	0f 90       	pop	r0
 46a:	0b be       	out	0x3b, r0	; 59
 46c:	0f 90       	pop	r0
 46e:	0f be       	out	0x3f, r0	; 63
 470:	0f 90       	pop	r0
 472:	1f 90       	pop	r1
 474:	18 95       	reti

00000476 <Checksum>:

volatile int Checksum(int len, char type, unsigned char *data){
 476:	0f 93       	push	r16
 478:	1f 93       	push	r17
 47a:	cf 93       	push	r28
 47c:	df 93       	push	r29
 47e:	00 d0       	rcall	.+0      	; 0x480 <Checksum+0xa>
 480:	1f 92       	push	r1
 482:	1f 92       	push	r1
 484:	cd b7       	in	r28, 0x3d	; 61
 486:	de b7       	in	r29, 0x3e	; 62
	int unsigned chksum = 0, i;
	unsigned char x, pre_data[] = {0x55,0xAA,(((len+7)&0xFF00)>>8),((len+7)&0x00FF),type};
 488:	25 e5       	ldi	r18, 0x55	; 85
 48a:	29 83       	std	Y+1, r18	; 0x01
 48c:	2a ea       	ldi	r18, 0xAA	; 170
 48e:	2a 83       	std	Y+2, r18	; 0x02
 490:	9c 01       	movw	r18, r24
 492:	29 5f       	subi	r18, 0xF9	; 249
 494:	3f 4f       	sbci	r19, 0xFF	; 255
 496:	3b 83       	std	Y+3, r19	; 0x03
 498:	27 e0       	ldi	r18, 0x07	; 7
 49a:	28 0f       	add	r18, r24
 49c:	2c 83       	std	Y+4, r18	; 0x04
 49e:	6d 83       	std	Y+5, r22	; 0x05
	
	switch(checksum){
 4a0:	20 91 eb 09 	lds	r18, 0x09EB	; 0x8009eb <checksum>
 4a4:	21 30       	cpi	r18, 0x01	; 1
 4a6:	19 f0       	breq	.+6      	; 0x4ae <Checksum+0x38>
 4a8:	22 30       	cpi	r18, 0x02	; 2
 4aa:	c1 f0       	breq	.+48     	; 0x4dc <Checksum+0x66>
 4ac:	61 c0       	rjmp	.+194    	; 0x570 <Checksum+0xfa>
 4ae:	fe 01       	movw	r30, r28
 4b0:	31 96       	adiw	r30, 0x01	; 1
 4b2:	de 01       	movw	r26, r28
 4b4:	16 96       	adiw	r26, 0x06	; 6
 4b6:	20 e0       	ldi	r18, 0x00	; 0
 4b8:	30 e0       	ldi	r19, 0x00	; 0
		case ZERO16 : 
			chksum = 0;
			break;
		case LRC8 :
			for(i=0;i<5;i++){
				chksum ^= (int)pre_data[i];
 4ba:	61 91       	ld	r22, Z+
 4bc:	26 27       	eor	r18, r22
	switch(checksum){
		case ZERO16 : 
			chksum = 0;
			break;
		case LRC8 :
			for(i=0;i<5;i++){
 4be:	ea 17       	cp	r30, r26
 4c0:	fb 07       	cpc	r31, r27
 4c2:	d9 f7       	brne	.-10     	; 0x4ba <Checksum+0x44>
				chksum ^= (int)pre_data[i];
			}
			for(i=0;i<len;i++){
 4c4:	00 97       	sbiw	r24, 0x00	; 0
 4c6:	09 f4       	brne	.+2      	; 0x4ca <Checksum+0x54>
 4c8:	55 c0       	rjmp	.+170    	; 0x574 <Checksum+0xfe>
 4ca:	fa 01       	movw	r30, r20
 4cc:	48 0f       	add	r20, r24
 4ce:	59 1f       	adc	r21, r25
				chksum ^= (int)data[i];
 4d0:	91 91       	ld	r25, Z+
 4d2:	29 27       	eor	r18, r25
			break;
		case LRC8 :
			for(i=0;i<5;i++){
				chksum ^= (int)pre_data[i];
			}
			for(i=0;i<len;i++){
 4d4:	e4 17       	cp	r30, r20
 4d6:	f5 07       	cpc	r31, r21
 4d8:	d9 f7       	brne	.-10     	; 0x4d0 <Checksum+0x5a>
 4da:	4c c0       	rjmp	.+152    	; 0x574 <Checksum+0xfe>
 4dc:	fe 01       	movw	r30, r28
 4de:	31 96       	adiw	r30, 0x01	; 1
 4e0:	de 01       	movw	r26, r28
 4e2:	16 96       	adiw	r26, 0x06	; 6

volatile int Checksum(int len, char type, unsigned char *data){
	int unsigned chksum = 0, i;
	unsigned char x, pre_data[] = {0x55,0xAA,(((len+7)&0xFF00)>>8),((len+7)&0x00FF),type};
	
	switch(checksum){
 4e4:	2f ef       	ldi	r18, 0xFF	; 255
 4e6:	3f ef       	ldi	r19, 0xFF	; 255
			break;
		case CRC16 : 
			chksum = 0xFFFF;
			
			for(i=0;i<5;i++){
				x = chksum >> 8 ^ (int)pre_data[i];
 4e8:	61 91       	ld	r22, Z+
 4ea:	63 27       	eor	r22, r19
				x ^= x>>4;
 4ec:	76 2f       	mov	r23, r22
 4ee:	72 95       	swap	r23
 4f0:	7f 70       	andi	r23, 0x0F	; 15
 4f2:	67 27       	eor	r22, r23
				chksum = (chksum << 8) ^ ((unsigned int)(x << 12)) ^ ((unsigned int)(x <<5)) ^ ((unsigned int)x);
 4f4:	70 e0       	ldi	r23, 0x00	; 0
 4f6:	32 2f       	mov	r19, r18
 4f8:	22 27       	eor	r18, r18
 4fa:	26 27       	eor	r18, r22
 4fc:	37 27       	eor	r19, r23
 4fe:	8b 01       	movw	r16, r22
 500:	10 2f       	mov	r17, r16
 502:	00 27       	eor	r16, r16
 504:	12 95       	swap	r17
 506:	10 7f       	andi	r17, 0xF0	; 240
 508:	20 27       	eor	r18, r16
 50a:	31 27       	eor	r19, r17
 50c:	66 0f       	add	r22, r22
 50e:	77 1f       	adc	r23, r23
 510:	62 95       	swap	r22
 512:	72 95       	swap	r23
 514:	70 7f       	andi	r23, 0xF0	; 240
 516:	76 27       	eor	r23, r22
 518:	60 7f       	andi	r22, 0xF0	; 240
 51a:	76 27       	eor	r23, r22
 51c:	26 27       	eor	r18, r22
 51e:	37 27       	eor	r19, r23
			}
			break;
		case CRC16 : 
			chksum = 0xFFFF;
			
			for(i=0;i<5;i++){
 520:	ea 17       	cp	r30, r26
 522:	fb 07       	cpc	r31, r27
 524:	09 f7       	brne	.-62     	; 0x4e8 <Checksum+0x72>
				x = chksum >> 8 ^ (int)pre_data[i];
				x ^= x>>4;
				chksum = (chksum << 8) ^ ((unsigned int)(x << 12)) ^ ((unsigned int)(x <<5)) ^ ((unsigned int)x);
			}
			for(i=0;i<len;i++){
 526:	00 97       	sbiw	r24, 0x00	; 0
 528:	29 f1       	breq	.+74     	; 0x574 <Checksum+0xfe>
 52a:	da 01       	movw	r26, r20
 52c:	48 0f       	add	r20, r24
 52e:	59 1f       	adc	r21, r25
				x = chksum >> 8 ^ (int)data[i];
 530:	6d 91       	ld	r22, X+
 532:	63 27       	eor	r22, r19
				x ^= x>>4;
 534:	86 2f       	mov	r24, r22
 536:	82 95       	swap	r24
 538:	8f 70       	andi	r24, 0x0F	; 15
 53a:	68 27       	eor	r22, r24
				chksum = (chksum << 8) ^ ((unsigned int)(x << 12)) ^ ((unsigned int)(x <<5)) ^ ((unsigned int)x);
 53c:	70 e0       	ldi	r23, 0x00	; 0
 53e:	32 2f       	mov	r19, r18
 540:	22 27       	eor	r18, r18
 542:	26 27       	eor	r18, r22
 544:	37 27       	eor	r19, r23
 546:	fb 01       	movw	r30, r22
 548:	fe 2f       	mov	r31, r30
 54a:	ee 27       	eor	r30, r30
 54c:	f2 95       	swap	r31
 54e:	f0 7f       	andi	r31, 0xF0	; 240
 550:	2e 27       	eor	r18, r30
 552:	3f 27       	eor	r19, r31
 554:	66 0f       	add	r22, r22
 556:	77 1f       	adc	r23, r23
 558:	62 95       	swap	r22
 55a:	72 95       	swap	r23
 55c:	70 7f       	andi	r23, 0xF0	; 240
 55e:	76 27       	eor	r23, r22
 560:	60 7f       	andi	r22, 0xF0	; 240
 562:	76 27       	eor	r23, r22
 564:	26 27       	eor	r18, r22
 566:	37 27       	eor	r19, r23
			for(i=0;i<5;i++){
				x = chksum >> 8 ^ (int)pre_data[i];
				x ^= x>>4;
				chksum = (chksum << 8) ^ ((unsigned int)(x << 12)) ^ ((unsigned int)(x <<5)) ^ ((unsigned int)x);
			}
			for(i=0;i<len;i++){
 568:	a4 17       	cp	r26, r20
 56a:	b5 07       	cpc	r27, r21
 56c:	09 f7       	brne	.-62     	; 0x530 <Checksum+0xba>
 56e:	02 c0       	rjmp	.+4      	; 0x574 <Checksum+0xfe>
			break;
	}
}

volatile int Checksum(int len, char type, unsigned char *data){
	int unsigned chksum = 0, i;
 570:	20 e0       	ldi	r18, 0x00	; 0
 572:	30 e0       	ldi	r19, 0x00	; 0
				chksum = (chksum << 8) ^ ((unsigned int)(x << 12)) ^ ((unsigned int)(x <<5)) ^ ((unsigned int)x);
			}
			break;
	}
	return chksum;
}
 574:	c9 01       	movw	r24, r18
 576:	0f 90       	pop	r0
 578:	0f 90       	pop	r0
 57a:	0f 90       	pop	r0
 57c:	0f 90       	pop	r0
 57e:	0f 90       	pop	r0
 580:	df 91       	pop	r29
 582:	cf 91       	pop	r28
 584:	1f 91       	pop	r17
 586:	0f 91       	pop	r16
 588:	08 95       	ret

0000058a <__vector_36>:
		
	}//end loop
}//end main


ISR(USART1_RX_vect){
 58a:	1f 92       	push	r1
 58c:	0f 92       	push	r0
 58e:	0f b6       	in	r0, 0x3f	; 63
 590:	0f 92       	push	r0
 592:	11 24       	eor	r1, r1
 594:	0b b6       	in	r0, 0x3b	; 59
 596:	0f 92       	push	r0
 598:	2f 93       	push	r18
 59a:	3f 93       	push	r19
 59c:	4f 93       	push	r20
 59e:	5f 93       	push	r21
 5a0:	6f 93       	push	r22
 5a2:	7f 93       	push	r23
 5a4:	8f 93       	push	r24
 5a6:	9f 93       	push	r25
 5a8:	af 93       	push	r26
 5aa:	bf 93       	push	r27
 5ac:	cf 93       	push	r28
 5ae:	ef 93       	push	r30
 5b0:	ff 93       	push	r31
	static unsigned int i = 0, turn=0;
	static char check=1;
	
	//Modtager data fra Labview
	
	switch(turn){
 5b2:	80 91 e8 09 	lds	r24, 0x09E8	; 0x8009e8 <turn.1864>
 5b6:	90 91 e9 09 	lds	r25, 0x09E9	; 0x8009e9 <turn.1864+0x1>
 5ba:	82 30       	cpi	r24, 0x02	; 2
 5bc:	91 05       	cpc	r25, r1
 5be:	09 f4       	brne	.+2      	; 0x5c2 <__vector_36+0x38>
 5c0:	44 c0       	rjmp	.+136    	; 0x64a <__vector_36+0xc0>
 5c2:	28 f4       	brcc	.+10     	; 0x5ce <__vector_36+0x44>
 5c4:	00 97       	sbiw	r24, 0x00	; 0
 5c6:	69 f0       	breq	.+26     	; 0x5e2 <__vector_36+0x58>
 5c8:	01 97       	sbiw	r24, 0x01	; 1
 5ca:	01 f1       	breq	.+64     	; 0x60c <__vector_36+0x82>
 5cc:	d3 c0       	rjmp	.+422    	; 0x774 <__vector_36+0x1ea>
 5ce:	84 30       	cpi	r24, 0x04	; 4
 5d0:	91 05       	cpc	r25, r1
 5d2:	09 f4       	brne	.+2      	; 0x5d6 <__vector_36+0x4c>
 5d4:	75 c0       	rjmp	.+234    	; 0x6c0 <__vector_36+0x136>
 5d6:	08 f4       	brcc	.+2      	; 0x5da <__vector_36+0x50>
 5d8:	59 c0       	rjmp	.+178    	; 0x68c <__vector_36+0x102>
 5da:	05 97       	sbiw	r24, 0x05	; 5
 5dc:	09 f4       	brne	.+2      	; 0x5e0 <__vector_36+0x56>
 5de:	9a c0       	rjmp	.+308    	; 0x714 <__vector_36+0x18a>
 5e0:	c9 c0       	rjmp	.+402    	; 0x774 <__vector_36+0x1ea>
		case 0 :
			if(0x55 == UDR1){
 5e2:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 5e6:	85 35       	cpi	r24, 0x55	; 85
 5e8:	09 f0       	breq	.+2      	; 0x5ec <__vector_36+0x62>
 5ea:	c4 c0       	rjmp	.+392    	; 0x774 <__vector_36+0x1ea>
				buff1[i] = UDR1;
 5ec:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 5f0:	e0 91 e6 09 	lds	r30, 0x09E6	; 0x8009e6 <i.1863>
 5f4:	f0 91 e7 09 	lds	r31, 0x09E7	; 0x8009e7 <i.1863+0x1>
 5f8:	ed 53       	subi	r30, 0x3D	; 61
 5fa:	fe 4e       	sbci	r31, 0xEE	; 238
 5fc:	80 83       	st	Z, r24
				turn++;
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	90 93 e9 09 	sts	0x09E9, r25	; 0x8009e9 <turn.1864+0x1>
 606:	80 93 e8 09 	sts	0x09E8, r24	; 0x8009e8 <turn.1864>
 60a:	b4 c0       	rjmp	.+360    	; 0x774 <__vector_36+0x1ea>
			}
			break;
		case 1 :
			if(0xAA == UDR1){
 60c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 610:	8a 3a       	cpi	r24, 0xAA	; 170
 612:	81 f4       	brne	.+32     	; 0x634 <__vector_36+0xaa>
				buff1[i] = UDR1;
 614:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 618:	e0 91 e6 09 	lds	r30, 0x09E6	; 0x8009e6 <i.1863>
 61c:	f0 91 e7 09 	lds	r31, 0x09E7	; 0x8009e7 <i.1863+0x1>
 620:	ed 53       	subi	r30, 0x3D	; 61
 622:	fe 4e       	sbci	r31, 0xEE	; 238
 624:	80 83       	st	Z, r24
				turn++;
 626:	82 e0       	ldi	r24, 0x02	; 2
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	90 93 e9 09 	sts	0x09E9, r25	; 0x8009e9 <turn.1864+0x1>
 62e:	80 93 e8 09 	sts	0x09E8, r24	; 0x8009e8 <turn.1864>
 632:	a0 c0       	rjmp	.+320    	; 0x774 <__vector_36+0x1ea>
			}
			else{
				i=-1;
 634:	8f ef       	ldi	r24, 0xFF	; 255
 636:	9f ef       	ldi	r25, 0xFF	; 255
 638:	90 93 e7 09 	sts	0x09E7, r25	; 0x8009e7 <i.1863+0x1>
 63c:	80 93 e6 09 	sts	0x09E6, r24	; 0x8009e6 <i.1863>
				turn = 0;
 640:	10 92 e9 09 	sts	0x09E9, r1	; 0x8009e9 <turn.1864+0x1>
 644:	10 92 e8 09 	sts	0x09E8, r1	; 0x8009e8 <turn.1864>
 648:	95 c0       	rjmp	.+298    	; 0x774 <__vector_36+0x1ea>
			}
			break;
		case 2 :
			buff1[i] = UDR1;
 64a:	80 91 e6 09 	lds	r24, 0x09E6	; 0x8009e6 <i.1863>
 64e:	90 91 e7 09 	lds	r25, 0x09E7	; 0x8009e7 <i.1863+0x1>
 652:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 656:	fc 01       	movw	r30, r24
 658:	ed 53       	subi	r30, 0x3D	; 61
 65a:	fe 4e       	sbci	r31, 0xEE	; 238
 65c:	20 83       	st	Z, r18
			if(i==3){
 65e:	03 97       	sbiw	r24, 0x03	; 3
 660:	09 f0       	breq	.+2      	; 0x664 <__vector_36+0xda>
 662:	88 c0       	rjmp	.+272    	; 0x774 <__vector_36+0x1ea>
				package_len = (int)(buff1[2]<<8)+buff1[3];
 664:	e3 ec       	ldi	r30, 0xC3	; 195
 666:	f1 e1       	ldi	r31, 0x11	; 17
 668:	82 81       	ldd	r24, Z+2	; 0x02
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	98 2f       	mov	r25, r24
 66e:	88 27       	eor	r24, r24
 670:	23 81       	ldd	r18, Z+3	; 0x03
 672:	82 0f       	add	r24, r18
 674:	91 1d       	adc	r25, r1
 676:	90 93 c2 11 	sts	0x11C2, r25	; 0x8011c2 <package_len+0x1>
 67a:	80 93 c1 11 	sts	0x11C1, r24	; 0x8011c1 <package_len>
				turn++;
 67e:	83 e0       	ldi	r24, 0x03	; 3
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	90 93 e9 09 	sts	0x09E9, r25	; 0x8009e9 <turn.1864+0x1>
 686:	80 93 e8 09 	sts	0x09E8, r24	; 0x8009e8 <turn.1864>
 68a:	74 c0       	rjmp	.+232    	; 0x774 <__vector_36+0x1ea>
			}
			break;
		case 3 :
			buff1[i] = UDR1;
 68c:	20 91 e6 09 	lds	r18, 0x09E6	; 0x8009e6 <i.1863>
 690:	30 91 e7 09 	lds	r19, 0x09E7	; 0x8009e7 <i.1863+0x1>
 694:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 698:	f9 01       	movw	r30, r18
 69a:	ed 53       	subi	r30, 0x3D	; 61
 69c:	fe 4e       	sbci	r31, 0xEE	; 238
 69e:	80 83       	st	Z, r24
			if(i==package_len-3){
 6a0:	80 91 c1 11 	lds	r24, 0x11C1	; 0x8011c1 <package_len>
 6a4:	90 91 c2 11 	lds	r25, 0x11C2	; 0x8011c2 <package_len+0x1>
 6a8:	03 97       	sbiw	r24, 0x03	; 3
 6aa:	28 17       	cp	r18, r24
 6ac:	39 07       	cpc	r19, r25
 6ae:	09 f0       	breq	.+2      	; 0x6b2 <__vector_36+0x128>
 6b0:	61 c0       	rjmp	.+194    	; 0x774 <__vector_36+0x1ea>
				turn++;
 6b2:	84 e0       	ldi	r24, 0x04	; 4
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	90 93 e9 09 	sts	0x09E9, r25	; 0x8009e9 <turn.1864+0x1>
 6ba:	80 93 e8 09 	sts	0x09E8, r24	; 0x8009e8 <turn.1864>
 6be:	5a c0       	rjmp	.+180    	; 0x774 <__vector_36+0x1ea>
			}
			break;
		case 4 :
			buff1[i] = UDR1;
 6c0:	c0 91 ce 00 	lds	r28, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 6c4:	e0 91 e6 09 	lds	r30, 0x09E6	; 0x8009e6 <i.1863>
 6c8:	f0 91 e7 09 	lds	r31, 0x09E7	; 0x8009e7 <i.1863+0x1>
 6cc:	ed 53       	subi	r30, 0x3D	; 61
 6ce:	fe 4e       	sbci	r31, 0xEE	; 238
 6d0:	c0 83       	st	Z, r28
			check = buff1[i] ^ ((Checksum(package_len-7, buff1[4], buff1+5)&0xFF00)>>8);
 6d2:	80 91 c1 11 	lds	r24, 0x11C1	; 0x8011c1 <package_len>
 6d6:	90 91 c2 11 	lds	r25, 0x11C2	; 0x8011c2 <package_len+0x1>
 6da:	48 ec       	ldi	r20, 0xC8	; 200
 6dc:	51 e1       	ldi	r21, 0x11	; 17
 6de:	60 91 c7 11 	lds	r22, 0x11C7	; 0x8011c7 <buff1+0x4>
 6e2:	07 97       	sbiw	r24, 0x07	; 7
 6e4:	c8 de       	rcall	.-624    	; 0x476 <Checksum>
 6e6:	9c 27       	eor	r25, r28
 6e8:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <check.1865>
			if(check == 0){
 6ec:	91 11       	cpse	r25, r1
 6ee:	07 c0       	rjmp	.+14     	; 0x6fe <__vector_36+0x174>
				turn++;
 6f0:	85 e0       	ldi	r24, 0x05	; 5
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	90 93 e9 09 	sts	0x09E9, r25	; 0x8009e9 <turn.1864+0x1>
 6f8:	80 93 e8 09 	sts	0x09E8, r24	; 0x8009e8 <turn.1864>
 6fc:	3b c0       	rjmp	.+118    	; 0x774 <__vector_36+0x1ea>
			}
			else{
				i=-1;
 6fe:	8f ef       	ldi	r24, 0xFF	; 255
 700:	9f ef       	ldi	r25, 0xFF	; 255
 702:	90 93 e7 09 	sts	0x09E7, r25	; 0x8009e7 <i.1863+0x1>
 706:	80 93 e6 09 	sts	0x09E6, r24	; 0x8009e6 <i.1863>
				turn = 0;
 70a:	10 92 e9 09 	sts	0x09E9, r1	; 0x8009e9 <turn.1864+0x1>
 70e:	10 92 e8 09 	sts	0x09E8, r1	; 0x8009e8 <turn.1864>
 712:	30 c0       	rjmp	.+96     	; 0x774 <__vector_36+0x1ea>
			}
			break;
		case 5 :
			buff1[i] = UDR1;
 714:	c0 91 ce 00 	lds	r28, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 718:	e0 91 e6 09 	lds	r30, 0x09E6	; 0x8009e6 <i.1863>
 71c:	f0 91 e7 09 	lds	r31, 0x09E7	; 0x8009e7 <i.1863+0x1>
 720:	ed 53       	subi	r30, 0x3D	; 61
 722:	fe 4e       	sbci	r31, 0xEE	; 238
 724:	c0 83       	st	Z, r28
			check = buff1[i] ^ (Checksum(package_len-7, buff1[4], buff1+5)&0x00FF);//Vi trækker 7 fra for at få den aktuelle længde af dataen og ligger 5 til Buff1 da der er de første værdier er prædefineret i funktionen
 726:	80 91 c1 11 	lds	r24, 0x11C1	; 0x8011c1 <package_len>
 72a:	90 91 c2 11 	lds	r25, 0x11C2	; 0x8011c2 <package_len+0x1>
 72e:	48 ec       	ldi	r20, 0xC8	; 200
 730:	51 e1       	ldi	r21, 0x11	; 17
 732:	60 91 c7 11 	lds	r22, 0x11C7	; 0x8011c7 <buff1+0x4>
 736:	07 97       	sbiw	r24, 0x07	; 7
 738:	9e de       	rcall	.-708    	; 0x476 <Checksum>
 73a:	8c 27       	eor	r24, r28
 73c:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <check.1865>
			if(check == 0){
 740:	81 11       	cpse	r24, r1
 742:	0e c0       	rjmp	.+28     	; 0x760 <__vector_36+0x1d6>
				UART1 = 1;
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	80 93 ea 09 	sts	0x09EA, r24	; 0x8009ea <UART1>
				i=-1;
 74a:	8f ef       	ldi	r24, 0xFF	; 255
 74c:	9f ef       	ldi	r25, 0xFF	; 255
 74e:	90 93 e7 09 	sts	0x09E7, r25	; 0x8009e7 <i.1863+0x1>
 752:	80 93 e6 09 	sts	0x09E6, r24	; 0x8009e6 <i.1863>
				turn=0;
 756:	10 92 e9 09 	sts	0x09E9, r1	; 0x8009e9 <turn.1864+0x1>
 75a:	10 92 e8 09 	sts	0x09E8, r1	; 0x8009e8 <turn.1864>
 75e:	0a c0       	rjmp	.+20     	; 0x774 <__vector_36+0x1ea>
			}
			else{
				i=-1;
 760:	8f ef       	ldi	r24, 0xFF	; 255
 762:	9f ef       	ldi	r25, 0xFF	; 255
 764:	90 93 e7 09 	sts	0x09E7, r25	; 0x8009e7 <i.1863+0x1>
 768:	80 93 e6 09 	sts	0x09E6, r24	; 0x8009e6 <i.1863>
				turn = 0;
 76c:	10 92 e9 09 	sts	0x09E9, r1	; 0x8009e9 <turn.1864+0x1>
 770:	10 92 e8 09 	sts	0x09E8, r1	; 0x8009e8 <turn.1864>
			}
			break;
	}
	
	i++;	
 774:	80 91 e6 09 	lds	r24, 0x09E6	; 0x8009e6 <i.1863>
 778:	90 91 e7 09 	lds	r25, 0x09E7	; 0x8009e7 <i.1863+0x1>
 77c:	01 96       	adiw	r24, 0x01	; 1
 77e:	90 93 e7 09 	sts	0x09E7, r25	; 0x8009e7 <i.1863+0x1>
 782:	80 93 e6 09 	sts	0x09E6, r24	; 0x8009e6 <i.1863>
}
 786:	ff 91       	pop	r31
 788:	ef 91       	pop	r30
 78a:	cf 91       	pop	r28
 78c:	bf 91       	pop	r27
 78e:	af 91       	pop	r26
 790:	9f 91       	pop	r25
 792:	8f 91       	pop	r24
 794:	7f 91       	pop	r23
 796:	6f 91       	pop	r22
 798:	5f 91       	pop	r21
 79a:	4f 91       	pop	r20
 79c:	3f 91       	pop	r19
 79e:	2f 91       	pop	r18
 7a0:	0f 90       	pop	r0
 7a2:	0b be       	out	0x3b, r0	; 59
 7a4:	0f 90       	pop	r0
 7a6:	0f be       	out	0x3f, r0	; 63
 7a8:	0f 90       	pop	r0
 7aa:	1f 90       	pop	r1
 7ac:	18 95       	reti

000007ae <__vector_38>:

ISR(USART1_TX_vect){
 7ae:	1f 92       	push	r1
 7b0:	0f 92       	push	r0
 7b2:	0f b6       	in	r0, 0x3f	; 63
 7b4:	0f 92       	push	r0
 7b6:	11 24       	eor	r1, r1
 7b8:	0b b6       	in	r0, 0x3b	; 59
 7ba:	0f 92       	push	r0
 7bc:	2f 93       	push	r18
 7be:	3f 93       	push	r19
 7c0:	4f 93       	push	r20
 7c2:	5f 93       	push	r21
 7c4:	6f 93       	push	r22
 7c6:	7f 93       	push	r23
 7c8:	8f 93       	push	r24
 7ca:	9f 93       	push	r25
 7cc:	af 93       	push	r26
 7ce:	bf 93       	push	r27
 7d0:	cf 93       	push	r28
 7d2:	df 93       	push	r29
 7d4:	ef 93       	push	r30
 7d6:	ff 93       	push	r31
	sei();
 7d8:	78 94       	sei
	static int i=0, turn=0, msg_length;
	static unsigned char data_out[MAX];
	
	//Bestemmer længden af den besked der skal sendes
	if(msg_type == Generator){
 7da:	60 91 03 02 	lds	r22, 0x0203	; 0x800203 <msg_type>
 7de:	61 30       	cpi	r22, 0x01	; 1
 7e0:	39 f4       	brne	.+14     	; 0x7f0 <__vector_38+0x42>
		msg_length = 5;
 7e2:	85 e0       	ldi	r24, 0x05	; 5
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	90 93 e5 09 	sts	0x09E5, r25	; 0x8009e5 <msg_length.1880+0x1>
 7ea:	80 93 e4 09 	sts	0x09E4, r24	; 0x8009e4 <msg_length.1880>
 7ee:	13 c0       	rjmp	.+38     	; 0x816 <__vector_38+0x68>
	}
	else if(msg_type == Oscilloskop){
 7f0:	62 30       	cpi	r22, 0x02	; 2
 7f2:	49 f4       	brne	.+18     	; 0x806 <__vector_38+0x58>
		msg_length = record_len;
 7f4:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <record_len>
 7f8:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <record_len+0x1>
 7fc:	90 93 e5 09 	sts	0x09E5, r25	; 0x8009e5 <msg_length.1880+0x1>
 800:	80 93 e4 09 	sts	0x09E4, r24	; 0x8009e4 <msg_length.1880>
 804:	08 c0       	rjmp	.+16     	; 0x816 <__vector_38+0x68>
	}
	else if(msg_type == Bodeplot){
 806:	63 30       	cpi	r22, 0x03	; 3
 808:	31 f4       	brne	.+12     	; 0x816 <__vector_38+0x68>
		msg_length = 255;
 80a:	8f ef       	ldi	r24, 0xFF	; 255
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	90 93 e5 09 	sts	0x09E5, r25	; 0x8009e5 <msg_length.1880+0x1>
 812:	80 93 e4 09 	sts	0x09E4, r24	; 0x8009e4 <msg_length.1880>
	}
	//Sender data til Labview
	switch(turn){	
 816:	e0 91 e2 09 	lds	r30, 0x09E2	; 0x8009e2 <turn.1879>
 81a:	f0 91 e3 09 	lds	r31, 0x09E3	; 0x8009e3 <turn.1879+0x1>
 81e:	e8 30       	cpi	r30, 0x08	; 8
 820:	f1 05       	cpc	r31, r1
 822:	08 f0       	brcs	.+2      	; 0x826 <__vector_38+0x78>
 824:	ac c0       	rjmp	.+344    	; 0x97e <__vector_38+0x1d0>
 826:	88 27       	eor	r24, r24
 828:	e6 58       	subi	r30, 0x86	; 134
 82a:	ff 4f       	sbci	r31, 0xFF	; 255
 82c:	8f 4f       	sbci	r24, 0xFF	; 255
 82e:	c8 c2       	rjmp	.+1424   	; 0xdc0 <__tablejump2__>
		case 0 :
			turn++;
 830:	81 e0       	ldi	r24, 0x01	; 1
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	90 93 e3 09 	sts	0x09E3, r25	; 0x8009e3 <turn.1879+0x1>
 838:	80 93 e2 09 	sts	0x09E2, r24	; 0x8009e2 <turn.1879>
			UDR1 = 0x55;
 83c:	85 e5       	ldi	r24, 0x55	; 85
 83e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
			break;
 842:	9d c0       	rjmp	.+314    	; 0x97e <__vector_38+0x1d0>
		case 1 :		
			turn++;
 844:	82 e0       	ldi	r24, 0x02	; 2
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	90 93 e3 09 	sts	0x09E3, r25	; 0x8009e3 <turn.1879+0x1>
 84c:	80 93 e2 09 	sts	0x09E2, r24	; 0x8009e2 <turn.1879>
			UDR1 = 0xAA;
 850:	8a ea       	ldi	r24, 0xAA	; 170
 852:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
			break;
 856:	93 c0       	rjmp	.+294    	; 0x97e <__vector_38+0x1d0>
		case 2 :
			turn++;
 858:	83 e0       	ldi	r24, 0x03	; 3
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	90 93 e3 09 	sts	0x09E3, r25	; 0x8009e3 <turn.1879+0x1>
 860:	80 93 e2 09 	sts	0x09E2, r24	; 0x8009e2 <turn.1879>
			UDR1 = ((msg_length+7)&0xFF00)>>8;//Der bliver lagt 7 til msg_length da der også er sync,length, type og chksum bytes 
 864:	80 91 e4 09 	lds	r24, 0x09E4	; 0x8009e4 <msg_length.1880>
 868:	90 91 e5 09 	lds	r25, 0x09E5	; 0x8009e5 <msg_length.1880+0x1>
 86c:	07 96       	adiw	r24, 0x07	; 7
 86e:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
			break;
 872:	85 c0       	rjmp	.+266    	; 0x97e <__vector_38+0x1d0>
		case 3 :
			turn++;
 874:	84 e0       	ldi	r24, 0x04	; 4
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	90 93 e3 09 	sts	0x09E3, r25	; 0x8009e3 <turn.1879+0x1>
 87c:	80 93 e2 09 	sts	0x09E2, r24	; 0x8009e2 <turn.1879>
			UDR1 = ((msg_length+7)&0x00FF);
 880:	80 91 e4 09 	lds	r24, 0x09E4	; 0x8009e4 <msg_length.1880>
 884:	89 5f       	subi	r24, 0xF9	; 249
 886:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
			break;
 88a:	79 c0       	rjmp	.+242    	; 0x97e <__vector_38+0x1d0>
		case 4 :
			turn++;
 88c:	85 e0       	ldi	r24, 0x05	; 5
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	90 93 e3 09 	sts	0x09E3, r25	; 0x8009e3 <turn.1879+0x1>
 894:	80 93 e2 09 	sts	0x09E2, r24	; 0x8009e2 <turn.1879>
			UDR1 = msg_type;
 898:	60 93 ce 00 	sts	0x00CE, r22	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
			break;
 89c:	70 c0       	rjmp	.+224    	; 0x97e <__vector_38+0x1d0>
		case 5 :
			if(msg_type == Generator){
 89e:	61 30       	cpi	r22, 0x01	; 1
 8a0:	69 f4       	brne	.+26     	; 0x8bc <__vector_38+0x10e>
				data_out[i] = Generator_data[i];	
 8a2:	80 91 e0 09 	lds	r24, 0x09E0	; 0x8009e0 <i.1878>
 8a6:	90 91 e1 09 	lds	r25, 0x09E1	; 0x8009e1 <i.1878+0x1>
 8aa:	fc 01       	movw	r30, r24
 8ac:	e4 54       	subi	r30, 0x44	; 68
 8ae:	fe 4e       	sbci	r31, 0xEE	; 238
 8b0:	20 81       	ld	r18, Z
 8b2:	fc 01       	movw	r30, r24
 8b4:	e0 5f       	subi	r30, 0xF0	; 240
 8b6:	fd 4f       	sbci	r31, 0xFD	; 253
 8b8:	20 83       	st	Z, r18
 8ba:	19 c0       	rjmp	.+50     	; 0x8ee <__vector_38+0x140>
			}
			else if(msg_type == Oscilloskop){
 8bc:	62 30       	cpi	r22, 0x02	; 2
 8be:	49 f4       	brne	.+18     	; 0x8d2 <__vector_38+0x124>
				data_out[i] = removeData();
 8c0:	c0 91 e0 09 	lds	r28, 0x09E0	; 0x8009e0 <i.1878>
 8c4:	d0 91 e1 09 	lds	r29, 0x09E1	; 0x8009e1 <i.1878+0x1>
 8c8:	e9 dc       	rcall	.-1582   	; 0x29c <removeData>
 8ca:	c0 5f       	subi	r28, 0xF0	; 240
 8cc:	dd 4f       	sbci	r29, 0xFD	; 253
 8ce:	88 83       	st	Y, r24
 8d0:	0e c0       	rjmp	.+28     	; 0x8ee <__vector_38+0x140>
			}
			else if(msg_type == Bodeplot){
 8d2:	63 30       	cpi	r22, 0x03	; 3
 8d4:	61 f4       	brne	.+24     	; 0x8ee <__vector_38+0x140>
				data_out[i] = amp[i]; 
 8d6:	80 91 e0 09 	lds	r24, 0x09E0	; 0x8009e0 <i.1878>
 8da:	90 91 e1 09 	lds	r25, 0x09E1	; 0x8009e1 <i.1878+0x1>
 8de:	fc 01       	movw	r30, r24
 8e0:	eb 50       	subi	r30, 0x0B	; 11
 8e2:	fe 4e       	sbci	r31, 0xEE	; 238
 8e4:	20 81       	ld	r18, Z
 8e6:	fc 01       	movw	r30, r24
 8e8:	e0 5f       	subi	r30, 0xF0	; 240
 8ea:	fd 4f       	sbci	r31, 0xFD	; 253
 8ec:	20 83       	st	Z, r18
			}
				
			UDR1 = data_out[i];
 8ee:	e0 91 e0 09 	lds	r30, 0x09E0	; 0x8009e0 <i.1878>
 8f2:	f0 91 e1 09 	lds	r31, 0x09E1	; 0x8009e1 <i.1878+0x1>
 8f6:	e0 5f       	subi	r30, 0xF0	; 240
 8f8:	fd 4f       	sbci	r31, 0xFD	; 253
 8fa:	80 81       	ld	r24, Z
 8fc:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
			
			i++;
 900:	80 91 e0 09 	lds	r24, 0x09E0	; 0x8009e0 <i.1878>
 904:	90 91 e1 09 	lds	r25, 0x09E1	; 0x8009e1 <i.1878+0x1>
 908:	01 96       	adiw	r24, 0x01	; 1
 90a:	90 93 e1 09 	sts	0x09E1, r25	; 0x8009e1 <i.1878+0x1>
 90e:	80 93 e0 09 	sts	0x09E0, r24	; 0x8009e0 <i.1878>
			if(i==msg_length){
 912:	20 91 e4 09 	lds	r18, 0x09E4	; 0x8009e4 <msg_length.1880>
 916:	30 91 e5 09 	lds	r19, 0x09E5	; 0x8009e5 <msg_length.1880+0x1>
 91a:	82 17       	cp	r24, r18
 91c:	93 07       	cpc	r25, r19
 91e:	79 f5       	brne	.+94     	; 0x97e <__vector_38+0x1d0>
				turn++;
 920:	80 91 e2 09 	lds	r24, 0x09E2	; 0x8009e2 <turn.1879>
 924:	90 91 e3 09 	lds	r25, 0x09E3	; 0x8009e3 <turn.1879+0x1>
 928:	01 96       	adiw	r24, 0x01	; 1
 92a:	90 93 e3 09 	sts	0x09E3, r25	; 0x8009e3 <turn.1879+0x1>
 92e:	80 93 e2 09 	sts	0x09E2, r24	; 0x8009e2 <turn.1879>
				i=0;
 932:	10 92 e1 09 	sts	0x09E1, r1	; 0x8009e1 <i.1878+0x1>
 936:	10 92 e0 09 	sts	0x09E0, r1	; 0x8009e0 <i.1878>
 93a:	21 c0       	rjmp	.+66     	; 0x97e <__vector_38+0x1d0>
			}
			break;
		case 6 :
			turn++;
 93c:	87 e0       	ldi	r24, 0x07	; 7
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	90 93 e3 09 	sts	0x09E3, r25	; 0x8009e3 <turn.1879+0x1>
 944:	80 93 e2 09 	sts	0x09E2, r24	; 0x8009e2 <turn.1879>
			UDR1 = ((Checksum(msg_length, msg_type, data_out))&0xFF00)>>8;
 948:	40 e1       	ldi	r20, 0x10	; 16
 94a:	52 e0       	ldi	r21, 0x02	; 2
 94c:	80 91 e4 09 	lds	r24, 0x09E4	; 0x8009e4 <msg_length.1880>
 950:	90 91 e5 09 	lds	r25, 0x09E5	; 0x8009e5 <msg_length.1880+0x1>
 954:	90 dd       	rcall	.-1248   	; 0x476 <Checksum>
 956:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
			break;
 95a:	11 c0       	rjmp	.+34     	; 0x97e <__vector_38+0x1d0>
		case 7 :
			turn=0;
 95c:	10 92 e3 09 	sts	0x09E3, r1	; 0x8009e3 <turn.1879+0x1>
 960:	10 92 e2 09 	sts	0x09E2, r1	; 0x8009e2 <turn.1879>
			UDR1 = ((Checksum(msg_length, msg_type, data_out))&0x00FF);
 964:	40 e1       	ldi	r20, 0x10	; 16
 966:	52 e0       	ldi	r21, 0x02	; 2
 968:	80 91 e4 09 	lds	r24, 0x09E4	; 0x8009e4 <msg_length.1880>
 96c:	90 91 e5 09 	lds	r25, 0x09E5	; 0x8009e5 <msg_length.1880+0x1>
 970:	82 dd       	rcall	.-1276   	; 0x476 <Checksum>
 972:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
			DIS_intr_TX();
 976:	f4 d1       	rcall	.+1000   	; 0xd60 <DIS_intr_TX>
			msg_type = Oscilloskop;
 978:	82 e0       	ldi	r24, 0x02	; 2
 97a:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <msg_type>
			break;
	}
}
 97e:	ff 91       	pop	r31
 980:	ef 91       	pop	r30
 982:	df 91       	pop	r29
 984:	cf 91       	pop	r28
 986:	bf 91       	pop	r27
 988:	af 91       	pop	r26
 98a:	9f 91       	pop	r25
 98c:	8f 91       	pop	r24
 98e:	7f 91       	pop	r23
 990:	6f 91       	pop	r22
 992:	5f 91       	pop	r21
 994:	4f 91       	pop	r20
 996:	3f 91       	pop	r19
 998:	2f 91       	pop	r18
 99a:	0f 90       	pop	r0
 99c:	0b be       	out	0x3b, r0	; 59
 99e:	0f 90       	pop	r0
 9a0:	0f be       	out	0x3f, r0	; 63
 9a2:	0f 90       	pop	r0
 9a4:	1f 90       	pop	r1
 9a6:	18 95       	reti

000009a8 <amplitude>:
	}  
	
	EN_intr_TX();
}

char amplitude(){
 9a8:	0f 93       	push	r16
 9aa:	1f 93       	push	r17
 9ac:	cf 93       	push	r28
 9ae:	df 93       	push	r29
	front = 0;
 9b0:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <__data_end+0x1>
 9b4:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <__data_end>
	rear = -1;
 9b8:	8f ef       	ldi	r24, 0xFF	; 255
 9ba:	9f ef       	ldi	r25, 0xFF	; 255
 9bc:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
 9c0:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
	itemCount = 0;
 9c4:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <itemCount+0x1>
 9c8:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <itemCount>
 9cc:	c8 e8       	ldi	r28, 0x88	; 136
 9ce:	d3 e1       	ldi	r29, 0x13	; 19
	int i;
	char datain = 0, max = 0,min = 0xFF;
 9d0:	1f ef       	ldi	r17, 0xFF	; 255
 9d2:	00 e0       	ldi	r16, 0x00	; 0
	for(i=0;i<5000;i++){
		while (itemCount != 0);
 9d4:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <itemCount>
 9d8:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <itemCount+0x1>
 9dc:	23 2b       	or	r18, r19
 9de:	d1 f7       	brne	.-12     	; 0x9d4 <amplitude+0x2c>
		datain = removeData();
 9e0:	5d dc       	rcall	.-1862   	; 0x29c <removeData>
 9e2:	08 17       	cp	r16, r24
 9e4:	08 f4       	brcc	.+2      	; 0x9e8 <amplitude+0x40>
 9e6:	08 2f       	mov	r16, r24
 9e8:	81 17       	cp	r24, r17
 9ea:	08 f4       	brcc	.+2      	; 0x9ee <amplitude+0x46>
 9ec:	18 2f       	mov	r17, r24
 9ee:	21 97       	sbiw	r28, 0x01	; 1
	front = 0;
	rear = -1;
	itemCount = 0;
	int i;
	char datain = 0, max = 0,min = 0xFF;
	for(i=0;i<5000;i++){
 9f0:	89 f7       	brne	.-30     	; 0x9d4 <amplitude+0x2c>
		if (datain < min){
			min = datain;
		}
	}
	return max-min;
 9f2:	80 2f       	mov	r24, r16
 9f4:	81 1b       	sub	r24, r17
 9f6:	df 91       	pop	r29
 9f8:	cf 91       	pop	r28
 9fa:	1f 91       	pop	r17
 9fc:	0f 91       	pop	r16
 9fe:	08 95       	ret

00000a00 <bodeplot>:
	}
	return chksum;
}


void bodeplot(){
 a00:	cf 93       	push	r28
 a02:	df 93       	push	r29
	int i;
	SPI_send(0x00, 0x03);
 a04:	63 e0       	ldi	r22, 0x03	; 3
 a06:	80 e0       	ldi	r24, 0x00	; 0
 a08:	62 d1       	rcall	.+708    	; 0xcce <SPI_send>
	SPI_send(0x01, 0xFF);
 a0a:	6f ef       	ldi	r22, 0xFF	; 255
 a0c:	81 e0       	ldi	r24, 0x01	; 1
 a0e:	5f d1       	rcall	.+702    	; 0xcce <SPI_send>
	SPI_send(0x03, 0x01);
 a10:	61 e0       	ldi	r22, 0x01	; 1
 a12:	83 e0       	ldi	r24, 0x03	; 3
 a14:	5c d1       	rcall	.+696    	; 0xcce <SPI_send>
	set_samplerate(60000);
 a16:	80 e6       	ldi	r24, 0x60	; 96
 a18:	9a ee       	ldi	r25, 0xEA	; 234
 a1a:	d4 db       	rcall	.-2136   	; 0x1c4 <set_samplerate>
 a1c:	cf ef       	ldi	r28, 0xFF	; 255
 a1e:	df ef       	ldi	r29, 0xFF	; 255
 a20:	6c 2f       	mov	r22, r28
 a22:	6e 5f       	subi	r22, 0xFE	; 254
	for(i=0;i<255;i++){
		SPI_send(0x02,i+1);
 a24:	82 e0       	ldi	r24, 0x02	; 2
 a26:	53 d1       	rcall	.+678    	; 0xcce <SPI_send>
		amp[i-1] = amplitude();
 a28:	bf df       	rcall	.-130    	; 0x9a8 <amplitude>
 a2a:	fe 01       	movw	r30, r28
 a2c:	eb 50       	subi	r30, 0x0B	; 11
 a2e:	fe 4e       	sbci	r31, 0xEE	; 238
 a30:	80 83       	st	Z, r24
 a32:	21 96       	adiw	r28, 0x01	; 1
	int i;
	SPI_send(0x00, 0x03);
	SPI_send(0x01, 0xFF);
	SPI_send(0x03, 0x01);
	set_samplerate(60000);
	for(i=0;i<255;i++){
 a34:	ce 3f       	cpi	r28, 0xFE	; 254
 a36:	d1 05       	cpc	r29, r1
 a38:	99 f7       	brne	.-26     	; 0xa20 <bodeplot+0x20>
		SPI_send(0x02,i+1);
		amp[i-1] = amplitude();
	}  
	
	EN_intr_TX();
 a3a:	8c d1       	rcall	.+792    	; 0xd54 <EN_intr_TX>
}
 a3c:	df 91       	pop	r29
 a3e:	cf 91       	pop	r28
 a40:	08 95       	ret

00000a42 <main>:
	DIS_intr_TX();//Disable TXInt
	UDR1 = 0;//Sender til uart for at enable interrupt
}

int main(void)
{
 a42:	cf 93       	push	r28
 a44:	df 93       	push	r29
 a46:	cd b7       	in	r28, 0x3d	; 61
 a48:	de b7       	in	r29, 0x3e	; 62
 a4a:	e3 97       	sbiw	r28, 0x33	; 51
 a4c:	0f b6       	in	r0, 0x3f	; 63
 a4e:	f8 94       	cli
 a50:	de bf       	out	0x3e, r29	; 62
 a52:	0f be       	out	0x3f, r0	; 63
 a54:	cd bf       	out	0x3d, r28	; 61
    setup();
 a56:	47 dc       	rcall	.-1906   	; 0x2e6 <setup>
	unsigned char Lab_receive[50], type=0, button=5, priority=2, menu=0, state = 0;
 a58:	1b aa       	std	Y+51, r1	; 0x33
 a5a:	31 2c       	mov	r3, r1
 a5c:	12 e0       	ldi	r17, 0x02	; 2
 a5e:	0f 2e       	mov	r0, r31
 a60:	f5 e0       	ldi	r31, 0x05	; 5
 a62:	2f 2e       	mov	r2, r31
 a64:	f0 2d       	mov	r31, r0
 a66:	00 e0       	ldi	r16, 0x00	; 0
	//     UART RECIVE     //
	/////////////////////////
		if(UART1==1 && isTXintr_enabled()==False){ //
			UART1 = 0;
			
			while(i<package_len){
 a68:	a1 2c       	mov	r10, r1
 a6a:	b1 2c       	mov	r11, r1
					sample = 4;
				}
				set_samplerate(sample);
				
				//Bestemmer Rekord length afhængig af sample rate
				min_record = ((7*(long)sample)/(-sample+11520)+1);
 a6c:	0f 2e       	mov	r0, r31
 a6e:	41 2c       	mov	r4, r1
 a70:	fd e2       	ldi	r31, 0x2D	; 45
 a72:	5f 2e       	mov	r5, r31
 a74:	61 2c       	mov	r6, r1
 a76:	71 2c       	mov	r7, r1
 a78:	f0 2d       	mov	r31, r0
				}
				put_char((char)min_record);

				//Sætter FIFO bufferen tilbage til start
				front = 0;
				rear = -1;
 a7a:	88 24       	eor	r8, r8
 a7c:	8a 94       	dec	r8
 a7e:	98 2c       	mov	r9, r8
    while (1) 
    {
	/////////////////////////
	//     UART RECIVE     //
	/////////////////////////
		if(UART1==1 && isTXintr_enabled()==False){ //
 a80:	80 91 ea 09 	lds	r24, 0x09EA	; 0x8009ea <UART1>
 a84:	81 30       	cpi	r24, 0x01	; 1
 a86:	21 f5       	brne	.+72     	; 0xad0 <main+0x8e>
 a88:	71 d1       	rcall	.+738    	; 0xd6c <isTXintr_enabled>
 a8a:	81 11       	cpse	r24, r1
 a8c:	21 c0       	rjmp	.+66     	; 0xad0 <main+0x8e>
			UART1 = 0;
 a8e:	10 92 ea 09 	sts	0x09EA, r1	; 0x8009ea <UART1>
			
			while(i<package_len){
 a92:	80 91 c1 11 	lds	r24, 0x11C1	; 0x8011c1 <package_len>
 a96:	90 91 c2 11 	lds	r25, 0x11C2	; 0x8011c2 <package_len+0x1>
 a9a:	89 2b       	or	r24, r25
 a9c:	81 f0       	breq	.+32     	; 0xabe <main+0x7c>
 a9e:	a3 ec       	ldi	r26, 0xC3	; 195
 aa0:	b1 e1       	ldi	r27, 0x11	; 17
 aa2:	fe 01       	movw	r30, r28
 aa4:	31 96       	adiw	r30, 0x01	; 1
 aa6:	95 01       	movw	r18, r10
				Lab_receive[i]=buff1[i];
 aa8:	8d 91       	ld	r24, X+
 aaa:	81 93       	st	Z+, r24
				//put_char(Lab_receive[i]);
				i++;
 aac:	2f 5f       	subi	r18, 0xFF	; 255
 aae:	3f 4f       	sbci	r19, 0xFF	; 255
	//     UART RECIVE     //
	/////////////////////////
		if(UART1==1 && isTXintr_enabled()==False){ //
			UART1 = 0;
			
			while(i<package_len){
 ab0:	80 91 c1 11 	lds	r24, 0x11C1	; 0x8011c1 <package_len>
 ab4:	90 91 c2 11 	lds	r25, 0x11C2	; 0x8011c2 <package_len+0x1>
 ab8:	28 17       	cp	r18, r24
 aba:	39 07       	cpc	r19, r25
 abc:	a8 f3       	brcs	.-22     	; 0xaa8 <main+0x66>
				Lab_receive[i]=buff1[i];
				//put_char(Lab_receive[i]);
				i++;
			}
			memset(buff1,0,50);	
 abe:	e3 ec       	ldi	r30, 0xC3	; 195
 ac0:	f1 e1       	ldi	r31, 0x11	; 17
 ac2:	22 e3       	ldi	r18, 0x32	; 50
 ac4:	11 92       	st	Z+, r1
 ac6:	2a 95       	dec	r18
 ac8:	e9 f7       	brne	.-6      	; 0xac4 <main+0x82>
			i=0;
			
			//Bestemmer hvilken fane beskeden er sendt fra
			type = Lab_receive[4];	//Burges til at opdatere lokale variabler
 aca:	0d 81       	ldd	r16, Y+5	; 0x05
			msg_type = type;		//Bruges til at bestemme hvor retur beskeden skal sendes hen
 acc:	00 93 03 02 	sts	0x0203, r16	; 0x800203 <msg_type>
		}
		
	////////////////////////////////////////
	//     Behandler data fra labview     //
	////////////////////////////////////////	
		switch(type){
 ad0:	02 30       	cpi	r16, 0x02	; 2
 ad2:	71 f0       	breq	.+28     	; 0xaf0 <main+0xae>
 ad4:	03 30       	cpi	r16, 0x03	; 3
 ad6:	09 f4       	brne	.+2      	; 0xada <main+0x98>
 ad8:	6e c0       	rjmp	.+220    	; 0xbb6 <main+0x174>
 ada:	01 30       	cpi	r16, 0x01	; 1
 adc:	09 f0       	breq	.+2      	; 0xae0 <main+0x9e>
 ade:	6d c0       	rjmp	.+218    	; 0xbba <main+0x178>
			case Generator :
				priority = Generator;
				button = Lab_receive[5];
 ae0:	2e 80       	ldd	r2, Y+6	; 0x06
				type = Default;
			break;
		}

		//Vælger hvad der skal sendes til labview
		if(isTXintr_enabled()==False){
 ae2:	44 d1       	rcall	.+648    	; 0xd6c <isTXintr_enabled>
 ae4:	88 23       	and	r24, r24
 ae6:	09 f4       	brne	.+2      	; 0xaea <main+0xa8>
 ae8:	71 c0       	rjmp	.+226    	; 0xbcc <main+0x18a>
		switch(type){
			case Generator :
				priority = Generator;
				button = Lab_receive[5];
				
				type = Default;
 aea:	00 e0       	ldi	r16, 0x00	; 0
	////////////////////////////////////////
	//     Behandler data fra labview     //
	////////////////////////////////////////	
		switch(type){
			case Generator :
				priority = Generator;
 aec:	11 e0       	ldi	r17, 0x01	; 1
 aee:	c8 cf       	rjmp	.-112    	; 0xa80 <main+0x3e>
				
				type = Default;
				break;
				
			case Oscilloskop :
				sample = (int)((Lab_receive[5]<<8)+Lab_receive[6]);
 af0:	8e 81       	ldd	r24, Y+6	; 0x06
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	98 2f       	mov	r25, r24
 af6:	88 27       	eor	r24, r24
 af8:	2f 81       	ldd	r18, Y+7	; 0x07
 afa:	82 0f       	add	r24, r18
 afc:	91 1d       	adc	r25, r1
 afe:	6c 01       	movw	r12, r24
 b00:	99 0f       	add	r25, r25
 b02:	ee 08       	sbc	r14, r14
 b04:	ff 08       	sbc	r15, r15
				record_len = (int)((Lab_receive[7]<<8)+Lab_receive[8]);
 b06:	28 85       	ldd	r18, Y+8	; 0x08
 b08:	30 e0       	ldi	r19, 0x00	; 0
 b0a:	32 2f       	mov	r19, r18
 b0c:	22 27       	eor	r18, r18
 b0e:	99 85       	ldd	r25, Y+9	; 0x09
 b10:	29 0f       	add	r18, r25
 b12:	31 1d       	adc	r19, r1
 b14:	30 93 05 02 	sts	0x0205, r19	; 0x800205 <record_len+0x1>
 b18:	20 93 04 02 	sts	0x0204, r18	; 0x800204 <record_len>
				put_char((char)sample);
 b1c:	2d d1       	rcall	.+602    	; 0xd78 <put_char>
				//Bestemmer sample raten
				if(sample<4){
 b1e:	84 e0       	ldi	r24, 0x04	; 4
 b20:	c8 16       	cp	r12, r24
 b22:	d1 04       	cpc	r13, r1
 b24:	e1 04       	cpc	r14, r1
 b26:	f1 04       	cpc	r15, r1
 b28:	34 f4       	brge	.+12     	; 0xb36 <main+0xf4>
					sample = 4;
 b2a:	68 94       	set
 b2c:	cc 24       	eor	r12, r12
 b2e:	c2 f8       	bld	r12, 2
 b30:	d1 2c       	mov	r13, r1
 b32:	e1 2c       	mov	r14, r1
 b34:	f1 2c       	mov	r15, r1
				}
				set_samplerate(sample);
 b36:	c6 01       	movw	r24, r12
 b38:	45 db       	rcall	.-2422   	; 0x1c4 <set_samplerate>
				
				//Bestemmer Rekord length afhængig af sample rate
				min_record = ((7*(long)sample)/(-sample+11520)+1);
 b3a:	d7 01       	movw	r26, r14
 b3c:	c6 01       	movw	r24, r12
 b3e:	88 0f       	add	r24, r24
 b40:	99 1f       	adc	r25, r25
 b42:	aa 1f       	adc	r26, r26
 b44:	bb 1f       	adc	r27, r27
 b46:	88 0f       	add	r24, r24
 b48:	99 1f       	adc	r25, r25
 b4a:	aa 1f       	adc	r26, r26
 b4c:	bb 1f       	adc	r27, r27
 b4e:	88 0f       	add	r24, r24
 b50:	99 1f       	adc	r25, r25
 b52:	aa 1f       	adc	r26, r26
 b54:	bb 1f       	adc	r27, r27
 b56:	bc 01       	movw	r22, r24
 b58:	cd 01       	movw	r24, r26
 b5a:	6c 19       	sub	r22, r12
 b5c:	7d 09       	sbc	r23, r13
 b5e:	8e 09       	sbc	r24, r14
 b60:	9f 09       	sbc	r25, r15
 b62:	a3 01       	movw	r20, r6
 b64:	92 01       	movw	r18, r4
 b66:	2c 19       	sub	r18, r12
 b68:	3d 09       	sbc	r19, r13
 b6a:	4e 09       	sbc	r20, r14
 b6c:	5f 09       	sbc	r21, r15
 b6e:	0c d1       	rcall	.+536    	; 0xd88 <__divmodsi4>
 b70:	da 01       	movw	r26, r20
 b72:	c9 01       	movw	r24, r18
 b74:	01 96       	adiw	r24, 0x01	; 1
 b76:	a1 1d       	adc	r26, r1
 b78:	b1 1d       	adc	r27, r1
				
				if(record_len<=min_record){
 b7a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <record_len>
 b7e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <record_len+0x1>
 b82:	60 e0       	ldi	r22, 0x00	; 0
 b84:	70 e0       	ldi	r23, 0x00	; 0
 b86:	84 17       	cp	r24, r20
 b88:	95 07       	cpc	r25, r21
 b8a:	a6 07       	cpc	r26, r22
 b8c:	b7 07       	cpc	r27, r23
 b8e:	24 f0       	brlt	.+8      	; 0xb98 <main+0x156>
					record_len = min_record;
 b90:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <record_len+0x1>
 b94:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <record_len>
				}
				put_char((char)min_record);
 b98:	ef d0       	rcall	.+478    	; 0xd78 <put_char>

				//Sætter FIFO bufferen tilbage til start
				front = 0;
 b9a:	b0 92 07 02 	sts	0x0207, r11	; 0x800207 <__data_end+0x1>
 b9e:	a0 92 06 02 	sts	0x0206, r10	; 0x800206 <__data_end>
				rear = -1;
 ba2:	90 92 01 02 	sts	0x0201, r9	; 0x800201 <__data_start+0x1>
 ba6:	80 92 00 02 	sts	0x0200, r8	; 0x800200 <__data_start>
				itemCount = 0;
 baa:	b0 92 09 02 	sts	0x0209, r11	; 0x800209 <itemCount+0x1>
 bae:	a0 92 08 02 	sts	0x0208, r10	; 0x800208 <itemCount>
				
				type = Default;
 bb2:	00 e0       	ldi	r16, 0x00	; 0
				break;
 bb4:	02 c0       	rjmp	.+4      	; 0xbba <main+0x178>
				
			case Bodeplot :
				bodeplot();
 bb6:	24 df       	rcall	.-440    	; 0xa00 <bodeplot>
				type = Default;
 bb8:	00 e0       	ldi	r16, 0x00	; 0
			break;
		}

		//Vælger hvad der skal sendes til labview
		if(isTXintr_enabled()==False){
 bba:	d8 d0       	rcall	.+432    	; 0xd6c <isTXintr_enabled>
 bbc:	81 11       	cpse	r24, r1
 bbe:	60 cf       	rjmp	.-320    	; 0xa80 <main+0x3e>
			switch(priority){
 bc0:	11 30       	cpi	r17, 0x01	; 1
 bc2:	29 f0       	breq	.+10     	; 0xbce <main+0x18c>
 bc4:	12 30       	cpi	r17, 0x02	; 2
 bc6:	09 f4       	brne	.+2      	; 0xbca <main+0x188>
 bc8:	5b c0       	rjmp	.+182    	; 0xc80 <main+0x23e>
 bca:	5a cf       	rjmp	.-332    	; 0xa80 <main+0x3e>
		switch(type){
			case Generator :
				priority = Generator;
				button = Lab_receive[5];
				
				type = Default;
 bcc:	00 e0       	ldi	r16, 0x00	; 0

		//Vælger hvad der skal sendes til labview
		if(isTXintr_enabled()==False){
			switch(priority){
				case Generator :
					switch(button){
 bce:	e1 e0       	ldi	r30, 0x01	; 1
 bd0:	2e 16       	cp	r2, r30
 bd2:	09 f1       	breq	.+66     	; 0xc16 <main+0x1d4>
 bd4:	2e 16       	cp	r2, r30
 bd6:	38 f0       	brcs	.+14     	; 0xbe6 <main+0x1a4>
 bd8:	f2 e0       	ldi	r31, 0x02	; 2
 bda:	2f 16       	cp	r2, r31
 bdc:	29 f1       	breq	.+74     	; 0xc28 <main+0x1e6>
 bde:	23 e0       	ldi	r18, 0x03	; 3
 be0:	22 16       	cp	r2, r18
 be2:	99 f1       	breq	.+102    	; 0xc4a <main+0x208>
 be4:	4a c0       	rjmp	.+148    	; 0xc7a <main+0x238>
					
					case Enter :
						Generator_data[menu+1]=Lab_receive[6];
 be6:	83 2d       	mov	r24, r3
 be8:	90 e0       	ldi	r25, 0x00	; 0
 bea:	01 96       	adiw	r24, 0x01	; 1
 bec:	2f 81       	ldd	r18, Y+7	; 0x07
 bee:	fc 01       	movw	r30, r24
 bf0:	e4 54       	subi	r30, 0x44	; 68
 bf2:	fe 4e       	sbci	r31, 0xEE	; 238
 bf4:	20 83       	st	Z, r18
						
						if(menu == 0 && Lab_receive[6]>4){
 bf6:	31 10       	cpse	r3, r1
 bf8:	07 c0       	rjmp	.+14     	; 0xc08 <main+0x1c6>
 bfa:	25 30       	cpi	r18, 0x05	; 5
 bfc:	28 f0       	brcs	.+10     	; 0xc08 <main+0x1c6>
							Generator_data[menu+1] = 4;
 bfe:	fc 01       	movw	r30, r24
 c00:	e4 54       	subi	r30, 0x44	; 68
 c02:	fe 4e       	sbci	r31, 0xEE	; 238
 c04:	24 e0       	ldi	r18, 0x04	; 4
 c06:	20 83       	st	Z, r18
						}
						
						SPI_send(menu, Generator_data[menu+1]);
 c08:	fc 01       	movw	r30, r24
 c0a:	e4 54       	subi	r30, 0x44	; 68
 c0c:	fe 4e       	sbci	r31, 0xEE	; 238
 c0e:	60 81       	ld	r22, Z
 c10:	83 2d       	mov	r24, r3
 c12:	5d d0       	rcall	.+186    	; 0xcce <SPI_send>
						
						break;
 c14:	32 c0       	rjmp	.+100    	; 0xc7a <main+0x238>
					case Select :
						menu++;
 c16:	33 94       	inc	r3
						if(menu == 3)
 c18:	83 e0       	ldi	r24, 0x03	; 3
 c1a:	38 12       	cpse	r3, r24
 c1c:	01 c0       	rjmp	.+2      	; 0xc20 <main+0x1de>
						{
							menu = 0;
 c1e:	31 2c       	mov	r3, r1
						}
						Generator_data[0] = menu;
 c20:	ec eb       	ldi	r30, 0xBC	; 188
 c22:	f1 e1       	ldi	r31, 0x11	; 17
 c24:	30 82       	st	Z, r3
						break;
 c26:	29 c0       	rjmp	.+82     	; 0xc7a <main+0x238>
					case RunStop:
						
						if(state==1){
 c28:	fb a9       	ldd	r31, Y+51	; 0x33
 c2a:	f1 30       	cpi	r31, 0x01	; 1
 c2c:	21 f4       	brne	.+8      	; 0xc36 <main+0x1f4>
							Generator_data[4] = 0;
 c2e:	10 92 c0 11 	sts	0x11C0, r1	; 0x8011c0 <Generator_data+0x4>
							state = 0;
 c32:	1b aa       	std	Y+51, r1	; 0x33
 c34:	05 c0       	rjmp	.+10     	; 0xc40 <main+0x1fe>
						}
						else{
							Generator_data[4] = 1;
 c36:	21 e0       	ldi	r18, 0x01	; 1
 c38:	20 93 c0 11 	sts	0x11C0, r18	; 0x8011c0 <Generator_data+0x4>
							state = 1;
 c3c:	81 e0       	ldi	r24, 0x01	; 1
 c3e:	8b ab       	std	Y+51, r24	; 0x33
						}
						SPI_send(0x03, Generator_data[4]);
 c40:	60 91 c0 11 	lds	r22, 0x11C0	; 0x8011c0 <Generator_data+0x4>
 c44:	83 e0       	ldi	r24, 0x03	; 3
 c46:	43 d0       	rcall	.+134    	; 0xcce <SPI_send>
						break;
 c48:	18 c0       	rjmp	.+48     	; 0xc7a <main+0x238>
					case Reset :
						Generator_data[0] = 0; // menu
 c4a:	ec eb       	ldi	r30, 0xBC	; 188
 c4c:	f1 e1       	ldi	r31, 0x11	; 17
 c4e:	10 82       	st	Z, r1
						Generator_data[1] = 0; // shape
 c50:	10 92 bd 11 	sts	0x11BD, r1	; 0x8011bd <Generator_data+0x1>
						Generator_data[2] = 0; // amplitude
 c54:	10 92 be 11 	sts	0x11BE, r1	; 0x8011be <Generator_data+0x2>
						Generator_data[3] = 0; // Frequency
 c58:	10 92 bf 11 	sts	0x11BF, r1	; 0x8011bf <Generator_data+0x3>
						Generator_data[4] = 0; // Run/Stop
 c5c:	10 92 c0 11 	sts	0x11C0, r1	; 0x8011c0 <Generator_data+0x4>
						SPI_send(0x00, 0);
 c60:	60 e0       	ldi	r22, 0x00	; 0
 c62:	80 e0       	ldi	r24, 0x00	; 0
 c64:	34 d0       	rcall	.+104    	; 0xcce <SPI_send>
						SPI_send(0x01, 0);
 c66:	60 e0       	ldi	r22, 0x00	; 0
 c68:	81 e0       	ldi	r24, 0x01	; 1
 c6a:	31 d0       	rcall	.+98     	; 0xcce <SPI_send>
						SPI_send(0x02, 0);
 c6c:	60 e0       	ldi	r22, 0x00	; 0
 c6e:	82 e0       	ldi	r24, 0x02	; 2
 c70:	2e d0       	rcall	.+92     	; 0xcce <SPI_send>
						SPI_send(0x03, 0);
 c72:	60 e0       	ldi	r22, 0x00	; 0
 c74:	83 e0       	ldi	r24, 0x03	; 3
 c76:	2b d0       	rcall	.+86     	; 0xcce <SPI_send>
						menu = 0; //hvilken menu man er i, i generator tabben
 c78:	31 2c       	mov	r3, r1
						break;
					}
					priority = Oscilloskop;
					EN_intr_TX();
 c7a:	6c d0       	rcall	.+216    	; 0xd54 <EN_intr_TX>
						SPI_send(0x02, 0);
						SPI_send(0x03, 0);
						menu = 0; //hvilken menu man er i, i generator tabben
						break;
					}
					priority = Oscilloskop;
 c7c:	12 e0       	ldi	r17, 0x02	; 2
					EN_intr_TX();
					break;
 c7e:	00 cf       	rjmp	.-512    	; 0xa80 <main+0x3e>
				case Oscilloskop :
					if(itemCount >= record_len && isTXintr_enabled()==False){
 c80:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <itemCount>
 c84:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <itemCount+0x1>
 c88:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <record_len>
 c8c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <record_len+0x1>
 c90:	28 17       	cp	r18, r24
 c92:	39 07       	cpc	r19, r25
 c94:	08 f4       	brcc	.+2      	; 0xc98 <main+0x256>
 c96:	f4 ce       	rjmp	.-536    	; 0xa80 <main+0x3e>
 c98:	69 d0       	rcall	.+210    	; 0xd6c <isTXintr_enabled>
 c9a:	81 11       	cpse	r24, r1
 c9c:	f1 ce       	rjmp	.-542    	; 0xa80 <main+0x3e>
						EN_intr_TX(); //Enabler TXInt når vi er klar til at sende
 c9e:	5a d0       	rcall	.+180    	; 0xd54 <EN_intr_TX>
 ca0:	ef ce       	rjmp	.-546    	; 0xa80 <main+0x3e>

00000ca2 <SPI_MasterInit>:
	return SPDR;
}

void SPI_MasterInit(){
	
	DDRB |=(1<<DDB2)|(1<<DDB1)|(1<<DDB0); // Sætter data direction registeret til output på pin 51, 52 og 53 (SPI benene).
 ca2:	84 b1       	in	r24, 0x04	; 4
 ca4:	87 60       	ori	r24, 0x07	; 7
 ca6:	84 b9       	out	0x04, r24	; 4
	SPCR |=(1<<SPE)|(1<<MSTR)|(1<<CPOL);  //side 202 clock polarity: Cpol = 1, SCK er høj når idle. Leading Edge er på "falling"
 ca8:	8c b5       	in	r24, 0x2c	; 44
 caa:	88 65       	ori	r24, 0x58	; 88
 cac:	8c bd       	out	0x2c, r24	; 44
	SPCR |=(1<<SPR1); SPSR |=(1<<SPI2X); //500kHz
 cae:	8c b5       	in	r24, 0x2c	; 44
 cb0:	82 60       	ori	r24, 0x02	; 2
 cb2:	8c bd       	out	0x2c, r24	; 44
 cb4:	8d b5       	in	r24, 0x2d	; 45
 cb6:	81 60       	ori	r24, 0x01	; 1
 cb8:	8d bd       	out	0x2d, r24	; 45
	//SPCR |=(1<<CPHA);
	PORTB |=(1<<PB0);
 cba:	28 9a       	sbi	0x05, 0	; 5
 cbc:	08 95       	ret

00000cbe <SPI_MasterTxRx>:
//MOSI	Hvid	Pin 51 | B1
//SS	Rød		Pin 53 | B3


void SPI_MasterTxRx(unsigned char data) {
	PORTB &=~(1<<PB0);
 cbe:	28 98       	cbi	0x05, 0	; 5
	//put_char(data);
	SPDR = data;
 cc0:	8e bd       	out	0x2e, r24	; 46
	
	while (!(SPSR &(1<<SPIF)));
 cc2:	0d b4       	in	r0, 0x2d	; 45
 cc4:	07 fe       	sbrs	r0, 7
 cc6:	fd cf       	rjmp	.-6      	; 0xcc2 <SPI_MasterTxRx+0x4>
		data = SPDR;
 cc8:	8e b5       	in	r24, 0x2e	; 46
	PORTB |=(1<<PB0);
 cca:	28 9a       	sbi	0x05, 0	; 5
 ccc:	08 95       	ret

00000cce <SPI_send>:
	//return data;
	
	//PORTB |=(1<<PB0);
}

unsigned char SPI_send(unsigned char addr, unsigned char data){ 
 cce:	1f 93       	push	r17
 cd0:	cf 93       	push	r28
 cd2:	df 93       	push	r29
 cd4:	d8 2f       	mov	r29, r24
 cd6:	c6 2f       	mov	r28, r22
	unsigned char syncbyte = 69;
	unsigned char checkbyte = addr ^ data;
 cd8:	18 2f       	mov	r17, r24
 cda:	16 27       	eor	r17, r22
	put_char(checkbyte);
	//put_char(0x4B);*/
	//put_char(0);
	//put_char(0);
	//SPCR |=(1<<SPIE);
	SPI_MasterTxRx(syncbyte);
 cdc:	85 e4       	ldi	r24, 0x45	; 69
 cde:	ef df       	rcall	.-34     	; 0xcbe <SPI_MasterTxRx>
	SPI_MasterTxRx(addr);
 ce0:	8d 2f       	mov	r24, r29
 ce2:	ed df       	rcall	.-38     	; 0xcbe <SPI_MasterTxRx>
	SPI_MasterTxRx(data);
 ce4:	8c 2f       	mov	r24, r28
 ce6:	eb df       	rcall	.-42     	; 0xcbe <SPI_MasterTxRx>
	SPI_MasterTxRx(checkbyte);
 ce8:	81 2f       	mov	r24, r17
 cea:	e9 df       	rcall	.-46     	; 0xcbe <SPI_MasterTxRx>
	}
	else{
		return 0;
	}*/
	return 0;
}
 cec:	80 e0       	ldi	r24, 0x00	; 0
 cee:	df 91       	pop	r29
 cf0:	cf 91       	pop	r28
 cf2:	1f 91       	pop	r17
 cf4:	08 95       	ret

00000cf6 <init_uart0>:

unsigned int record_len = 500;


void init_uart0(int baud){
	UBRR0H =(unsigned char)baud>>8;
 cf6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L =(unsigned char)baud;
 cfa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UCSR0A =(1<<U2X0);
 cfe:	82 e0       	ldi	r24, 0x02	; 2
 d00:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	UCSR0B|=(1<<RXEN0)|(1<<TXEN0);
 d04:	e1 ec       	ldi	r30, 0xC1	; 193
 d06:	f0 e0       	ldi	r31, 0x00	; 0
 d08:	80 81       	ld	r24, Z
 d0a:	88 61       	ori	r24, 0x18	; 24
 d0c:	80 83       	st	Z, r24
	UCSR0C|=(1<<UCSZ00)|(1<<UCSZ01);
 d0e:	e2 ec       	ldi	r30, 0xC2	; 194
 d10:	f0 e0       	ldi	r31, 0x00	; 0
 d12:	80 81       	ld	r24, Z
 d14:	86 60       	ori	r24, 0x06	; 6
 d16:	80 83       	st	Z, r24
	UCSR1B |=(1<<TXCIE0);//Enable transmit interrupt 
 d18:	e9 ec       	ldi	r30, 0xC9	; 201
 d1a:	f0 e0       	ldi	r31, 0x00	; 0
 d1c:	80 81       	ld	r24, Z
 d1e:	80 64       	ori	r24, 0x40	; 64
 d20:	80 83       	st	Z, r24
 d22:	08 95       	ret

00000d24 <init_uart1>:
}
void init_uart1(int baud){
	UBRR1H =(unsigned char)baud>>8;
 d24:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
	UBRR1L =(unsigned char)baud;
 d28:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
	UCSR1A =(1<<U2X1);
 d2c:	82 e0       	ldi	r24, 0x02	; 2
 d2e:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
	UCSR1B|=(1<<RXEN1)|(1<<TXEN1);
 d32:	e9 ec       	ldi	r30, 0xC9	; 201
 d34:	f0 e0       	ldi	r31, 0x00	; 0
 d36:	80 81       	ld	r24, Z
 d38:	88 61       	ori	r24, 0x18	; 24
 d3a:	80 83       	st	Z, r24
	UCSR1C|=(1<<UCSZ10)|(1<<UCSZ11);
 d3c:	aa ec       	ldi	r26, 0xCA	; 202
 d3e:	b0 e0       	ldi	r27, 0x00	; 0
 d40:	8c 91       	ld	r24, X
 d42:	86 60       	ori	r24, 0x06	; 6
 d44:	8c 93       	st	X, r24
	UCSR1B |=(1<<RXCIE1);//enable receive interrupt
 d46:	80 81       	ld	r24, Z
 d48:	80 68       	ori	r24, 0x80	; 128
 d4a:	80 83       	st	Z, r24
	UCSR1B |=(1<<TXCIE1);//enable transmit interrupt
 d4c:	80 81       	ld	r24, Z
 d4e:	80 64       	ori	r24, 0x40	; 64
 d50:	80 83       	st	Z, r24
 d52:	08 95       	ret

00000d54 <EN_intr_TX>:
}

//Disable og enable af TX complete for UART 1
void EN_intr_TX(){
	UCSR1B |=(1<<TXCIE1);
 d54:	e9 ec       	ldi	r30, 0xC9	; 201
 d56:	f0 e0       	ldi	r31, 0x00	; 0
 d58:	80 81       	ld	r24, Z
 d5a:	80 64       	ori	r24, 0x40	; 64
 d5c:	80 83       	st	Z, r24
 d5e:	08 95       	ret

00000d60 <DIS_intr_TX>:
}
void DIS_intr_TX(){
	UCSR1B &=~(1<<TXCIE1);
 d60:	e9 ec       	ldi	r30, 0xC9	; 201
 d62:	f0 e0       	ldi	r31, 0x00	; 0
 d64:	80 81       	ld	r24, Z
 d66:	8f 7b       	andi	r24, 0xBF	; 191
 d68:	80 83       	st	Z, r24
 d6a:	08 95       	ret

00000d6c <isTXintr_enabled>:
}

char isTXintr_enabled(){
	if((UCSR1B & (1<<TXCIE1))==0){
 d6c:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
		return 0;
	}
	
	return 1;
}
 d70:	86 fb       	bst	r24, 6
 d72:	88 27       	eor	r24, r24
 d74:	80 f9       	bld	r24, 0
 d76:	08 95       	ret

00000d78 <put_char>:
	

void put_char(char data){
	while(!(UCSR0A&(1<<UDRE0)));
 d78:	e0 ec       	ldi	r30, 0xC0	; 192
 d7a:	f0 e0       	ldi	r31, 0x00	; 0
 d7c:	90 81       	ld	r25, Z
 d7e:	95 ff       	sbrs	r25, 5
 d80:	fd cf       	rjmp	.-6      	; 0xd7c <put_char+0x4>
	UDR0=data;
 d82:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 d86:	08 95       	ret

00000d88 <__divmodsi4>:
 d88:	05 2e       	mov	r0, r21
 d8a:	97 fb       	bst	r25, 7
 d8c:	16 f4       	brtc	.+4      	; 0xd92 <__divmodsi4+0xa>
 d8e:	00 94       	com	r0
 d90:	0f d0       	rcall	.+30     	; 0xdb0 <__negsi2>
 d92:	57 fd       	sbrc	r21, 7
 d94:	05 d0       	rcall	.+10     	; 0xda0 <__divmodsi4_neg2>
 d96:	1c d0       	rcall	.+56     	; 0xdd0 <__udivmodsi4>
 d98:	07 fc       	sbrc	r0, 7
 d9a:	02 d0       	rcall	.+4      	; 0xda0 <__divmodsi4_neg2>
 d9c:	46 f4       	brtc	.+16     	; 0xdae <__divmodsi4_exit>
 d9e:	08 c0       	rjmp	.+16     	; 0xdb0 <__negsi2>

00000da0 <__divmodsi4_neg2>:
 da0:	50 95       	com	r21
 da2:	40 95       	com	r20
 da4:	30 95       	com	r19
 da6:	21 95       	neg	r18
 da8:	3f 4f       	sbci	r19, 0xFF	; 255
 daa:	4f 4f       	sbci	r20, 0xFF	; 255
 dac:	5f 4f       	sbci	r21, 0xFF	; 255

00000dae <__divmodsi4_exit>:
 dae:	08 95       	ret

00000db0 <__negsi2>:
 db0:	90 95       	com	r25
 db2:	80 95       	com	r24
 db4:	70 95       	com	r23
 db6:	61 95       	neg	r22
 db8:	7f 4f       	sbci	r23, 0xFF	; 255
 dba:	8f 4f       	sbci	r24, 0xFF	; 255
 dbc:	9f 4f       	sbci	r25, 0xFF	; 255
 dbe:	08 95       	ret

00000dc0 <__tablejump2__>:
 dc0:	ee 0f       	add	r30, r30
 dc2:	ff 1f       	adc	r31, r31
 dc4:	88 1f       	adc	r24, r24
 dc6:	8b bf       	out	0x3b, r24	; 59
 dc8:	07 90       	elpm	r0, Z+
 dca:	f6 91       	elpm	r31, Z
 dcc:	e0 2d       	mov	r30, r0
 dce:	19 94       	eijmp

00000dd0 <__udivmodsi4>:
 dd0:	a1 e2       	ldi	r26, 0x21	; 33
 dd2:	1a 2e       	mov	r1, r26
 dd4:	aa 1b       	sub	r26, r26
 dd6:	bb 1b       	sub	r27, r27
 dd8:	fd 01       	movw	r30, r26
 dda:	0d c0       	rjmp	.+26     	; 0xdf6 <__udivmodsi4_ep>

00000ddc <__udivmodsi4_loop>:
 ddc:	aa 1f       	adc	r26, r26
 dde:	bb 1f       	adc	r27, r27
 de0:	ee 1f       	adc	r30, r30
 de2:	ff 1f       	adc	r31, r31
 de4:	a2 17       	cp	r26, r18
 de6:	b3 07       	cpc	r27, r19
 de8:	e4 07       	cpc	r30, r20
 dea:	f5 07       	cpc	r31, r21
 dec:	20 f0       	brcs	.+8      	; 0xdf6 <__udivmodsi4_ep>
 dee:	a2 1b       	sub	r26, r18
 df0:	b3 0b       	sbc	r27, r19
 df2:	e4 0b       	sbc	r30, r20
 df4:	f5 0b       	sbc	r31, r21

00000df6 <__udivmodsi4_ep>:
 df6:	66 1f       	adc	r22, r22
 df8:	77 1f       	adc	r23, r23
 dfa:	88 1f       	adc	r24, r24
 dfc:	99 1f       	adc	r25, r25
 dfe:	1a 94       	dec	r1
 e00:	69 f7       	brne	.-38     	; 0xddc <__udivmodsi4_loop>
 e02:	60 95       	com	r22
 e04:	70 95       	com	r23
 e06:	80 95       	com	r24
 e08:	90 95       	com	r25
 e0a:	9b 01       	movw	r18, r22
 e0c:	ac 01       	movw	r20, r24
 e0e:	bd 01       	movw	r22, r26
 e10:	cf 01       	movw	r24, r30
 e12:	08 95       	ret

00000e14 <_exit>:
 e14:	f8 94       	cli

00000e16 <__stop_program>:
 e16:	ff cf       	rjmp	.-2      	; 0xe16 <__stop_program>
